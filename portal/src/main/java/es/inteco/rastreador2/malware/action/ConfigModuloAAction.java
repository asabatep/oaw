package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.plugin.dao.DataBaseManager;
import es.inteco.rastreador2.malware.actionform.ConfigAForm;
import es.inteco.rastreador2.malware.dao.MalwareDao;
import es.inteco.rastreador2.malware.dao.MalwareHit;
import es.inteco.rastreador2.utils.CrawlerUtils;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Connection;
import java.util.List;

import static es.inteco.common.Constants.CRAWLER_PROPERTIES;

/**
 * Clase InformesDispatchAction.
 * Action de Informes
 *
 * @author psanchez
 */
public class ConfigModuloAAction extends ConfigModuloAction {

    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        // Marcamos el menú
        request.getSession().setAttribute(Constants.MENU, Constants.MENU_CONFIG_MALWARE);
        request.getSession().setAttribute(Constants.SUBMENU, Constants.SUBMENU_CONFIG_MALWARE_A);

        if (CrawlerUtils.hasAccess(request, "config.malware")) {
            String action = request.getParameter(Constants.ACTION);
            if (action != null) {
                if (action.equals(Constants.CONFIG)) {
                    return loadConfiguration(mapping, form, request, response);
                } else if (action.equals(Constants.EDIT)) {
                    return editLoad(mapping, form, request, response);
                } else if (action.equals(Constants.SUBMIT_EDIT)) {
                    if (isCancelled(request)) {
                        return mapping.findForward(Constants.VOLVER);
                    } else {
                        ConfigAForm configAForm = (ConfigAForm) form;
                        return editData(configAForm, mapping, request, response);
                    }
                }
            }
        } else {
            return mapping.findForward(Constants.NO_PERMISSION);
        }

        return null;
    }

    public ActionForward loadConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ConfigAForm configForm = loadData();
        request.setAttribute(Constants.CONFIG_FORM, configForm);

        return mapping.findForward(Constants.CONFIG);
    }

    public ActionForward editLoad(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ConfigAForm configForm = loadData();
        request.setAttribute(Constants.CONFIG_FORM, configForm);

        return mapping.findForward(Constants.EDIT);
    }

    public ActionForward editData(ConfigAForm configAForm, ActionMapping mapping, HttpServletRequest request, HttpServletResponse response) {
        PropertiesManager pmgr = new PropertiesManager();
        ActionErrors errors = configAForm.validate(mapping, request);
        if (errors == null || errors.isEmpty()) {
            Connection conn = null;

            try {
                conn = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));
                MalwareDao.updateModuleA(conn, configAForm, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.a.hit.id")));
                return loadConfiguration(mapping, configAForm, request, response);
            } catch (Exception e) {
                Logger.putLog("Error al editar el módulo A", ConfigModuloAAction.class, Logger.LOG_LEVEL_ERROR, e);
            } finally {
                DataBaseManager.closeConnection(conn);
            }
        } else {
            saveErrors(request, errors);
            request.setAttribute(Constants.CONFIG_FORM, configAForm);
            return mapping.findForward(Constants.EDIT);
        }
        return null;
    }

    public ConfigAForm loadData() {
        Connection conn = null;
        PropertiesManager pmgr = new PropertiesManager();

        ConfigAForm configForm = new ConfigAForm();

        try {
            conn = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            List<MalwareHit> hits = MalwareDao.getHitsByModule(conn, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.a.hit.id")));
            for (MalwareHit hit : hits) {
                if (hit.getId() == Integer.parseInt(pmgr.getValue("malware.properties", "redirecciones.hit.id"))) {
                    configForm.setNumRedirections(hit.getValue());
                    configForm.setWeightRedirections(hit.getWeight().toString());
                    configForm.setConfidenceRedirections(hit.getConfidence().toString());
                } else if (hit.getId() == Integer.parseInt(pmgr.getValue("malware.properties", "reintentos.hit.id"))) {
                    configForm.setNumRetries(hit.getValue());
                    configForm.setWeightRetries(hit.getWeight().toString());
                    configForm.setConfidenceRetries(hit.getConfidence().toString());
                } else if (hit.getId() == Integer.parseInt(pmgr.getValue("malware.properties", "terminos.a.hit.id"))) {
                    configForm.setWeightTerms(hit.getWeight().toString());
                    configForm.setConfidenceTerms(hit.getConfidence().toString());
                }
            }

            MalwareHit globalHit = MalwareDao.getHitById(conn, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.a.hit.id")));
            configForm.setConfidence(globalHit.getConfidence().toString());
            configForm.setWeight(globalHit.getWeight().toString());
        } catch (Exception e) {
            Logger.putLog("Error al cargar la configuración del módulo A", ConfigModuloAAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }

        return configForm;
    }

}
