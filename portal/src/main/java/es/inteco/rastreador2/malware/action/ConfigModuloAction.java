package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.plugin.dao.DataBaseManager;
import es.inteco.rastreador2.malware.actionform.MalwareTermForm;
import es.inteco.rastreador2.malware.dao.MalwareDao;
import es.inteco.rastreador2.malware.dao.MalwareTerm;
import es.inteco.rastreador2.utils.CrawlerUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Connection;
import java.util.List;

/**
 * Clase InformesDispatchAction.
 * Action de Informes
 *
 * @author psanchez
 */
public class ConfigModuloAction extends Action {

    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        if (CrawlerUtils.hasAccess(request, "config.malware")) {
            String action = request.getParameter(Constants.ACTION);
            if (action != null) {
                if (action.equals(Constants.LOAD_TERMS)) {
                    return loadTerms(mapping, form, request, response);
                } else if (action.equals(Constants.DELETE_TERMS)) {
                    if (isCancelled(request)) {
                        return loadTerms(mapping, form, request, response);
                    } else {
                        return deleteTerms(mapping, form, request, response);
                    }
                } else if (action.equals(Constants.CONFIRMACION_ELIMINAR_TERM)) {
                    return loadDataTerm(mapping, form, request, response);
                } else if (action.equals(Constants.SAVE_TERM)) {
                    return saveTerm(mapping, form, request, response);
                } else if (action.equals(Constants.EDIT_TERM)) {
                    request.setAttribute(Constants.IS_UPDATE, 1);
                    return editTerm(mapping, form, request, response);
                }
            }
        }
        return null;
    }

    public ActionForward loadDataTerm(ActionMapping mapping, ActionForm form,
                                      HttpServletRequest request, HttpServletResponse response) {
        Connection conn = null;

        String idTerm = request.getParameter(Constants.ID_TERMINO);
        try {
            conn = DataBaseManager.getConnection();
            request.setAttribute(Constants.TERM, MalwareDao.getTermById(conn, Integer.parseInt(idTerm)));
        } catch (Exception e) {
            Logger.putLog("Error al cargar el términos ", ConfigModuloAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }

        request.setAttribute(Constants.ID_TERMINO, request.getParameter(Constants.ID_TERMINO));
        request.setAttribute(Constants.ID_HIT, request.getParameter(Constants.ID_HIT));

        // Cargamos los mensajes para la pantalla siguiente
        loadMessages(request);

        return mapping.findForward(Constants.CONFIRMACION_DELETE);

    }

    public ActionForward loadTerms(ActionMapping mapping, ActionForm form,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception {
        Connection conn = null;
        try {
            conn = DataBaseManager.getConnection();

            int idHit = Integer.parseInt(request.getParameter(Constants.ID_HIT));

            int pagina = 1;
            if (request.getParameter(Constants.PAG_PARAM) != null) {
                pagina = Integer.parseInt((String) request.getParameter(Constants.PAG_PARAM));
            }

            List<MalwareTerm> terms = MalwareDao.getTermsByModule(conn, idHit, (pagina - 1));
            if (request.getAttribute(Constants.IS_UPDATE) == null) {
                request.removeAttribute(Constants.MALWARE_TERM_FORM);
            }
            request.setAttribute(Constants.TERMS, terms);
        } catch (Exception e) {
            Logger.putLog("Error al cargar la lista de términos del contenido del módulo ", ConfigModuloAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }

        // Cargamos los mensajes para la pantalla siguiente
        loadMessages(request);

        return mapping.findForward(Constants.TERMS);
    }

    public ActionForward deleteTerms(ActionMapping mapping, ActionForm form,
                                     HttpServletRequest request, HttpServletResponse response) {

        Connection conn = null;

        try {
            conn = DataBaseManager.getConnection();

            String idTerm = request.getParameter(Constants.ID_TERMINO);
            if (idTerm != null) {
                MalwareDao.deleteTerm(conn, Integer.parseInt(idTerm));

                // Como hemos insertado o editado, normalizamos los pesos
                normalizeWeights();

                return loadTerms(mapping, form, request, response);
            }

        } catch (Exception e) {
            Logger.putLog("Error al borrar el término", ConfigModuloAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }

        return null;

    }

    public ActionForward saveTerm(ActionMapping mapping, ActionForm form,
                                  HttpServletRequest request, HttpServletResponse response) {

        MalwareTermForm termForm = (MalwareTermForm) form;

        int idHit = Integer.parseInt(request.getParameter(Constants.ID_HIT));

        ActionErrors errors = termForm.validate(mapping, request);
        if (errors != null && !errors.isEmpty()) {
            // Hay errores
            saveErrors(request, errors);
            ActionForward forward = new ActionForward(mapping.getInput());
            forward.setPath(forward.getPath() + "&" + Constants.ID_HIT + "=" + idHit);
            return forward;
        } else {
            Connection conn = null;

            try {
                conn = DataBaseManager.getConnection();

                MalwareTerm term = new MalwareTerm();
                BeanUtils.copyProperties(term, termForm);

                if (term.getId() > 0) {
                    // Estamos editando un término existente
                    MalwareDao.updateModuleTerm(conn, term, idHit);
                } else {
                    // Estamos guardando un nuevo término
                    MalwareDao.saveModuleTerm(conn, term, idHit);
                }

                // Como hemos insertado o editado, normalizamos los pesos
                normalizeWeights();
                return loadTerms(mapping, form, request, response);
            } catch (Exception e) {
                Logger.putLog("Error al insertar el término", ConfigModuloAction.class, Logger.LOG_LEVEL_ERROR, e);
                return null;
            } finally {
                DataBaseManager.closeConnection(conn);
            }
        }
    }

    private void loadMessages(HttpServletRequest request) {
        String idHit = request.getParameter(Constants.ID_HIT);

        String header = null;
        String title = null;
        String info = null;
        String caption = null;

        PropertiesManager pmgr = new PropertiesManager();
        if (idHit.equals(pmgr.getValue("malware.properties", "terminos.a.hit.id"))) {
            header = getResources(request).getMessage(getLocale(request), "malware.config.a");
            title = getResources(request).getMessage(getLocale(request), "malware.terms.a.title");
            info = getResources(request).getMessage(getLocale(request), "malware.terms.a.info");
            caption = getResources(request).getMessage(getLocale(request), "malware.terms.a.caption");
        } else if (idHit.equals(pmgr.getValue("malware.properties", "terminos.b.hit.id"))) {
            header = getResources(request).getMessage(getLocale(request), "malware.config.b");
            title = getResources(request).getMessage(getLocale(request), "malware.terms.b.title");
            info = getResources(request).getMessage(getLocale(request), "malware.terms.b.info");
            caption = getResources(request).getMessage(getLocale(request), "malware.terms.b.caption");
        } else if (idHit.equals(pmgr.getValue("malware.properties", "ofuscado.hit.id"))) {
            header = getResources(request).getMessage(getLocale(request), "malware.config.b");
            title = getResources(request).getMessage(getLocale(request), "malware.obfuscated.title");
            info = getResources(request).getMessage(getLocale(request), "malware.obfuscated.info");
            caption = getResources(request).getMessage(getLocale(request), "malware.obfuscated.caption");
        } else if (idHit.equals(pmgr.getValue("malware.properties", "dom.hit.id"))) {
            header = getResources(request).getMessage(getLocale(request), "malware.config.b");
            title = getResources(request).getMessage(getLocale(request), "malware.dom.title");
            info = getResources(request).getMessage(getLocale(request), "malware.dom.info");
            caption = getResources(request).getMessage("malware.dom.caption");
        } else if (idHit.equals(pmgr.getValue("malware.properties", "actionscript.hit.id"))) {
            header = getResources(request).getMessage(getLocale(request), "malware.config.d");
            title = getResources(request).getMessage(getLocale(request), "malware.actionscript.title");
            info = getResources(request).getMessage(getLocale(request), "malware.actionscript.info");
            caption = getResources(request).getMessage(getLocale(request), "malware.actionscript.caption");
        }

        request.setAttribute(Constants.HEADER, header);
        request.setAttribute(Constants.TITLE, title);
        request.setAttribute(Constants.INFO, info);
        request.setAttribute(Constants.CAPTION, caption);
    }

    public ActionForward editTerm(ActionMapping mapping, ActionForm form,
                                  HttpServletRequest request, HttpServletResponse response) throws Exception {
        Connection conn = null;

        try {
            conn = DataBaseManager.getConnection();

            Long idTerm = Long.parseLong(request.getParameter(Constants.ID_TERMINO));
            MalwareTerm malwareTerm = MalwareDao.getTermById(conn, idTerm);

            MalwareTermForm malwareTermForm = new MalwareTermForm();
            BeanUtils.copyProperties(malwareTermForm, malwareTerm);

            request.setAttribute(Constants.MALWARE_TERM_FORM, malwareTermForm);
        } catch (Exception e) {
            Logger.putLog("Error al cargar el término", ConfigModuloAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }

        return loadTerms(mapping, form, request, response);
    }

    private void normalizeWeights() {
        Connection conn = null;

        try {
            conn = DataBaseManager.getConnection();

            Double weightSum = MalwareDao.getWeightSum(conn, 1);
            MalwareDao.normalizeWeights(conn, weightSum, 1);
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            DataBaseManager.closeConnection(conn);
        }
    }
}
