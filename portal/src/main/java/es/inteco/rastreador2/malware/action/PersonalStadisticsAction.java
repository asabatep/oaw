package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.plugin.dao.DataBaseManager;
import es.inteco.rastreador2.malware.actionform.PersonStadisticsChoiceForm;
import es.inteco.rastreador2.malware.dao.MalwareDao;
import es.inteco.rastreador2.malware.dao.MalwareHit;
import es.inteco.rastreador2.malware.dao.MalwareTerm;
import es.inteco.rastreador2.malware.dao.MalwareTermResults;
import es.inteco.rastreador2.utils.Pagination;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static es.inteco.common.Constants.CRAWLER_PROPERTIES;


public class PersonalStadisticsAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String action = request.getParameter(Constants.ACTION);
        request.setAttribute(Constants.ID, request.getParameter(Constants.ID));

        if (isCancelled(request)) {
            if ((Constants.MODULE_RESULTS_PS.equals(action) || Constants.HIT_RESULTS_PS.equals(action) || Constants.TERM_RESULTS_PS.equals(action))) {
                return mapping.findForward(Constants.HOME_PS);
            }
        }

        if (action != null && action.equals(Constants.LOAD_PS)) {
            return choosePersonalStadisticType(request, mapping);
        } else if (action != null && action.equals(Constants.MODULE_RESULTS_PS)) {
            return loadModuleResultsList(request, mapping, form);
        } else if (action != null && action.equals(Constants.HIT_RESULTS_PS)) {
            return loadHitResultsList(request, mapping, form);
        } else if (action != null && action.equals(Constants.TERM_RESULTS_PS)) {
            return loadTermResultsList(request, mapping, form);
        } else if (action != null && action.equals(Constants.MODULE_DETAIL_PS)) {
            return loadModuleDetail(request, mapping);
        } else if (action != null && action.equals(Constants.TERM_DETAIL_PS)) {
            return loadTermDetail(request, mapping);
        } else if (action != null && action.equals(Constants.HIT_DETAIL_PS)) {
            return loadHitDetail(request, mapping);
        } else {
            return mapping.findForward(Constants.HOME_PS);
        }
    }

    /*
     * Método que redirige a la pantalla de elección de parámetros por los que se desean realizar las
     * estadísticas. Muestra términos, hits o modulos e función de a partir de que categoría de ellas se haya
     * seleccionado anteriormente.
     */
    private ActionForward choosePersonalStadisticType(HttpServletRequest request, ActionMapping mapping) {
        PropertiesManager pmgr = new PropertiesManager();

        String typePS = request.getParameter(Constants.TYPE_PS_PARAM);

        Connection conn = null;
        try {
            conn = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            if (typePS != null) {
                if (typePS.equals(Constants.TYPE_PS_PARAM_MODULE)) {
                    List<MalwareHit> malwareHitsList = MalwareDao.getHitsByModule(conn, Integer.parseInt(pmgr.getValue("malware.properties", "global.hit.id")));
                    request.setAttribute(Constants.MALWARE_HITS_LIST, malwareHitsList);
                    request.setAttribute(Constants.TYPE_PS_PARAM, Constants.TYPE_PS_PARAM_MODULE);
                } else if (typePS.equals(Constants.TYPE_PS_PARAM_HIT)) {
                    List<MalwareHit> malwareHitsList = MalwareDao.getHitsByModule(conn, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.a.hit.id")));
                    malwareHitsList.addAll(MalwareDao.getHitsByModule(conn, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.b.hit.id"))));
                    malwareHitsList.addAll(MalwareDao.getHitsByModule(conn, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.c.hit.id"))));
                    malwareHitsList.addAll(MalwareDao.getHitsByModule(conn, Integer.parseInt(pmgr.getValue("malware.properties", "modulo.d.hit.id"))));
                    request.setAttribute(Constants.MALWARE_HITS_LIST, malwareHitsList);
                    request.setAttribute(Constants.TYPE_PS_PARAM, Constants.TYPE_PS_PARAM_HIT);
                } else if (typePS.equals(Constants.TYPE_PS_PARAM_TERM)) {
                    List<MalwareTerm> malwareTermList = MalwareDao.getTerms(conn);
                    request.setAttribute(Constants.MALWARE_TERMS_LIST, malwareTermList);
                    request.setAttribute(Constants.TYPE_PS_PARAM, Constants.TYPE_PS_PARAM_TERM);
                }
                request.setAttribute(Constants.ID, request.getAttribute(Constants.ID));
                return mapping.findForward(Constants.CHOICE_PS);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }
        return null;
    }

    /*
     * Carga la lista de resultados en función de los parámetros anteriormente seleccinados.
     */
    private ActionForward loadModuleResultsList(HttpServletRequest request, ActionMapping mapping, ActionForm form) {
        String idRastreo = request.getParameter(Constants.ID);
        PropertiesManager pmgr = new PropertiesManager();

        PersonStadisticsChoiceForm personStadisticsChoiceForm = (PersonStadisticsChoiceForm) form;

        Connection conn = null;
        try {
            conn = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            int numResult = MalwareDao.countResultsByModule(conn, Long.valueOf(idRastreo), personStadisticsChoiceForm.getWeight(), personStadisticsChoiceForm.getElectionList());
            int pagina = Pagination.getPage(request, Constants.PAG_PARAM);

            request.setAttribute(Constants.MALWARE_RESULTS_LIST, MalwareDao.getResultsByModule(conn, Long.valueOf(idRastreo), personStadisticsChoiceForm.getWeight(), personStadisticsChoiceForm.getElectionList(), (pagina - 1)));
            request.setAttribute(Constants.LIST_PAGE_LINKS, Pagination.createPagination(request, numResult, pagina));
            request.getSession().setAttribute(Constants.ELECTION_LIST, personStadisticsChoiceForm.getElectionList());
            return mapping.findForward(Constants.MODULE_RESULTS_PS);
        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }
        return null;
    }

    /*
     * Carga el detalle de uno de los resultados. (Por módulo)
     */
    private ActionForward loadModuleDetail(HttpServletRequest request, ActionMapping mapping) {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        try {
            c = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            String[] idHits = (String[]) request.getSession().getAttribute(Constants.ELECTION_LIST);
            //request.getSession().removeAttribute(Constants.ELECTION_LIST);
            String md5 = request.getParameter(Constants.URL_ID);
            String id = request.getParameter(Constants.ID);

            List<MalwareHit> modules = new ArrayList<MalwareHit>();
            for (String idHit : idHits) {
                MalwareHit module = MalwareDao.getHitById(c, Integer.parseInt(idHit), md5, Long.valueOf(id));
                module.setSubhits(MalwareDao.getHitsByModule(c, module.getId(), md5, Long.valueOf(id)));
                modules.add(module);
            }
            request.setAttribute(Constants.URL, MalwareDao.getUrlByHash(c, request.getParameter(Constants.URL_ID)));
            request.setAttribute(Constants.MALWARE_HITS_LIST, modules);
            return mapping.findForward(Constants.MODULE_DETAIL_PS);
        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(c);
        }
        return null;
    }

    /**
     * Carga la lista de resultados en función de los parámetros anteriormente seleccinados.
     */
    private ActionForward loadTermResultsList(HttpServletRequest request, ActionMapping mapping, ActionForm form) {
        String idRastreo = request.getParameter(Constants.ID);
        PropertiesManager pmgr = new PropertiesManager();

        PersonStadisticsChoiceForm personStadisticsChoiceForm = (PersonStadisticsChoiceForm) form;

        Connection conn = null;
        try {
            conn = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            int pagina = Pagination.getPage(request, Constants.PAG_PARAM);

            //Tenemos el listado de Urls
            List<MalwareTermResults> malwareResultsList = MalwareDao.getResultsByTerm(conn, Long.valueOf(idRastreo), personStadisticsChoiceForm.getOccurrence(), personStadisticsChoiceForm.getElectionList(), (pagina - 1));

            Map<String, String> urlTerms = MalwareDao.getTermList(conn, personStadisticsChoiceForm.getElectionList());
            //Incluimos los terminos en las Urls
            for (MalwareTermResults malTermRes : malwareResultsList) {
                for (int i = 0; i < personStadisticsChoiceForm.getElectionList().length; i++) {
                    if (i < 5) {
                        MalwareTerm malwareTerm = MalwareDao.getTermByIdFromUrl(conn, Long.parseLong(personStadisticsChoiceForm.getElectionList()[i]), malTermRes.getIdUrl(), Long.parseLong(idRastreo));
                        if (malwareTerm.getTerm() == null || malwareTerm.getTerm().isEmpty()) {
                            malwareTerm.setTerm(urlTerms.get(personStadisticsChoiceForm.getElectionList()[i]));
                            malwareTerm.setOccurrences((long) 0);
                        }
                        malTermRes.getTermList().add(malwareTerm);
                    }
                }
            }

            int numResult = MalwareDao.countResultsByTerm(conn, Long.valueOf(idRastreo), personStadisticsChoiceForm.getOccurrence(), personStadisticsChoiceForm.getElectionList());
            pagina = Pagination.getPage(request, Constants.PAG_PARAM);
            request.setAttribute(Constants.MALWARE_RESULTS_LIST, malwareResultsList);
            request.setAttribute(Constants.LIST_PAGE_LINKS, Pagination.createPagination(request, numResult, pagina));
            request.getSession().setAttribute(Constants.PERSON_STADISTICS_FORM, personStadisticsChoiceForm);
            return mapping.findForward(Constants.TERM_RESULTS_PS);

        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }
        return null;
    }

	/*
     * Carga el detalle de uno de los resultados. (Por término)
	 */

    private ActionForward loadTermDetail(HttpServletRequest request, ActionMapping mapping) {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        try {
            c = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            String[] idTerm = ((PersonStadisticsChoiceForm) request.getSession().getAttribute(Constants.PERSON_STADISTICS_FORM)).getElectionList();
            Long occurrences = (long) ((PersonStadisticsChoiceForm) request.getSession().getAttribute(Constants.PERSON_STADISTICS_FORM)).getOccurrence();
            String md5 = request.getParameter(Constants.URL_ID);
            String id = request.getParameter(Constants.ID);

            List<MalwareTerm> termList = MalwareDao.getSelectedTermsByUrl(c, idTerm, md5, Long.valueOf(id), occurrences);

            request.setAttribute(Constants.URL, MalwareDao.getUrlByHash(c, request.getParameter(Constants.URL_ID)));
            request.setAttribute(Constants.MALWARE_TERMS_LIST, termList);
            return mapping.findForward(Constants.TERM_DETAIL_PS);
        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(c);
        }

        return null;
    }

    /*
     * Carga la lista de resultados en función de los parámetros anteriormente seleccinados.
     */
    private ActionForward loadHitResultsList(HttpServletRequest request, ActionMapping mapping, ActionForm form) {
        String idRastreo = request.getParameter(Constants.ID);
        PropertiesManager pmgr = new PropertiesManager();

        PersonStadisticsChoiceForm personStadisticsChoiceForm = (PersonStadisticsChoiceForm) form;

        Connection conn = null;
        try {
            conn = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            int numResult = MalwareDao.countResultsByHit(conn, Long.valueOf(idRastreo), personStadisticsChoiceForm.getWeight(), personStadisticsChoiceForm.getElectionList());
            int pagina = Pagination.getPage(request, Constants.PAG_PARAM);

            request.setAttribute(Constants.MALWARE_RESULTS_LIST, MalwareDao.getUrlResultsByHit(conn, Long.valueOf(idRastreo), personStadisticsChoiceForm.getWeight(), personStadisticsChoiceForm.getElectionList(), (pagina - 1)));
            request.setAttribute(Constants.LIST_PAGE_LINKS, Pagination.createPagination(request, numResult, pagina));
            request.getSession().setAttribute(Constants.PERSON_STADISTICS_FORM, personStadisticsChoiceForm);
            return mapping.findForward(Constants.HIT_RESULTS_PS);

        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(conn);
        }
        return null;
    }

    /*
     * Carga el detalle de uno de los resultados. (Por módulo)
     */
    private ActionForward loadHitDetail(HttpServletRequest request, ActionMapping mapping) {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        try {
            c = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            String[] idHits = ((PersonStadisticsChoiceForm) request.getSession().getAttribute(Constants.PERSON_STADISTICS_FORM)).getElectionList();
            Float weight = ((PersonStadisticsChoiceForm) request.getSession().getAttribute(Constants.PERSON_STADISTICS_FORM)).getWeight();
            //request.getSession().removeAttribute(Constants.ELECTION_LIST);
            String md5 = request.getParameter(Constants.URL_ID);
            String id = request.getParameter(Constants.ID);

            request.setAttribute(Constants.ELECTION_LIST, idHits);
            request.setAttribute(Constants.MALWARE_HIT_FORM, MalwareDao.getResultsByHit(c, Long.valueOf(id), weight, idHits, md5));
            request.setAttribute(Constants.URL, MalwareDao.getUrlByHash(c, request.getParameter(Constants.URL_ID)));
            return mapping.findForward(Constants.HIT_DETAIL_PS);
        } catch (Exception e) {
            Logger.putLog("Exception: ", PersonalStadisticsAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DataBaseManager.closeConnection(c);
        }

        return null;
    }

}
