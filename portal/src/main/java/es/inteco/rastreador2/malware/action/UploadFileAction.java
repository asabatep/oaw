package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.rastreador2.malware.actionform.UploadFileForm;
import org.apache.struts.action.*;
import org.apache.struts.upload.FormFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileOutputStream;


public class UploadFileAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String action = request.getParameter(Constants.ACTION);

        if (action != null && action.equals(Constants.LOAD)) {
            return mapping.findForward(Constants.UPLOAD_FILE);
        } else {
            if (isCancelled(request)) {
                return fileCancelled(mapping, request);
            } else {
                return loadFile(mapping, form, request);
            }
        }
    }

    private ActionForward fileCancelled(ActionMapping mapping, HttpServletRequest request) {
        if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_A)) {
            return mapping.findForward(Constants.EDIT_A);
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_B)) {
            return mapping.findForward(Constants.EDIT_B);
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_C)) {
            return mapping.findForward(Constants.EDIT_C);
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_D)) {
            return mapping.findForward(Constants.EDIT_D);
        }
        return null;

    }

    private ActionForward loadFile(ActionMapping mapping, ActionForm form, HttpServletRequest request) {
        PropertiesManager pmgr = new PropertiesManager();

        UploadFileForm uploadFileForm = (UploadFileForm) form;
        ActionErrors errors = uploadFileForm.validate(mapping, request);

        ActionForward forward = null;
        if (errors == null || errors.isEmpty()) {
            if (request.getSession().getAttribute(Constants.SUBMENU) != null && request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_A)) {
                forward = new ActionForward(mapping.findForward(Constants.EDIT_A));
            } else if (request.getSession().getAttribute(Constants.SUBMENU) != null && request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_B)) {
                writeTempFile(pmgr.getValue("malware.properties", "mime.type.file.path.tmp"), uploadFileForm.getFile());
                request.getSession().setAttribute(Constants.MULTIMEDIA_FILE, uploadFileForm.getFile());
                forward = new ActionForward(mapping.findForward(Constants.EDIT_B));
            } else if (request.getSession().getAttribute(Constants.SUBMENU) != null && request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_C)) {
                if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_WL)) {
                    writeTempFile(pmgr.getValue("malware.properties", "domains.wl.file.path.tmp"), uploadFileForm.getFile());
                    request.getSession().setAttribute(Constants.TYPE_LIST_FILE_WL, uploadFileForm.getFile());
                } else if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_BL)) {
                    writeTempFile(pmgr.getValue("malware.properties", "domains.bl.file.path.tmp"), uploadFileForm.getFile());
                    request.getSession().setAttribute(Constants.TYPE_LIST_FILE_BL, uploadFileForm.getFile());
                }
                forward = new ActionForward(mapping.findForward(Constants.EDIT_C));
            } else if (request.getSession().getAttribute(Constants.SUBMENU) != null && request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_D)) {
                if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_WL)) {
                    writeTempFile(pmgr.getValue("malware.properties", "certificates.wl.file.path.tmp"), uploadFileForm.getFile());
                    request.getSession().setAttribute(Constants.TYPE_LIST_FILE_WL, uploadFileForm.getFile());
                } else if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_BL)) {
                    writeTempFile(pmgr.getValue("malware.properties", "certificates.bl.file.path.tmp"), uploadFileForm.getFile());
                    request.getSession().setAttribute(Constants.TYPE_LIST_FILE_BL, uploadFileForm.getFile());
                }
                forward = new ActionForward(mapping.findForward(Constants.EDIT_D));
            }
            if (forward != null) {
                forward.setRedirect(true);
            }

            return forward;
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.UPLOAD_FILE);
        }
    }

    private void writeTempFile(String path, FormFile file) {
        FileOutputStream fout = null;

        try {
            File tmpDir = new File(path);
            if (!tmpDir.exists() && !tmpDir.mkdirs()) {
                Logger.putLog("Error al crear directorios para el fichero temporal en " + tmpDir.getPath(), UploadFileAction.class, Logger.LOG_LEVEL_ERROR);
            }
            File tmpFile = new File(tmpDir, file.getFileName());
            fout = new FileOutputStream(tmpFile);
            fout.write(file.getFileData());
            fout.flush();
        } catch (Exception e) {
            Logger.putLog("Error al guardar el contenido del fichero temporal en " + path + "/" + file.getFileName(), UploadFileAction.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            try {
                if (fout != null) {
                    fout.close();
                }
            } catch (Exception e) {
                Logger.putLog("Excepci√≥n: ", UploadFileAction.class, Logger.LOG_LEVEL_ERROR, e);
            }
        }
    }

}
