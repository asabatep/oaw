package es.inteco.rastreador2.malware.dao;

import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.common.utils.StringUtils;
import es.inteco.crawler.sexista.core.exception.BusinessException;
import es.inteco.rastreador2.malware.actionform.*;
import es.inteco.rastreador2.malware.utils.MalwareUtils;
import es.inteco.rastreador2.utils.DAOUtils;

import java.math.BigDecimal;
import java.sql.*;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import static es.inteco.common.Constants.CRAWLER_PROPERTIES;


public final class MalwareDao {

    private MalwareDao() {
    }

    public static List<ResultsByUrlMalware> getResultsByUrl(Connection conn, Long idRastreo, UrlSearchForm urlSearchForm, int pagina) throws BusinessException, SQLException {
        List<ResultsByUrlMalware> results = new ArrayList<>();
        PropertiesManager pmgr = new PropertiesManager();
        DateFormat df = new SimpleDateFormat(pmgr.getValue(CRAWLER_PROPERTIES, "date.format.simple"));
        PreparedStatement ps = null;
        ResultSet rs = null;
        int pagSize = Integer.parseInt(pmgr.getValue(CRAWLER_PROPERTIES, "pagination.size"));
        int resultFrom = pagSize * pagina;
        int paramCount = 1;
        try {
            StringBuilder query = new StringBuilder("SELECT r.url, r.md5, r.categoria FROM a001_malware_resultados r " +
                    "WHERE r.id_rastreo = ? ");

            if (StringUtils.isNotEmpty(urlSearchForm.getUrl())) {
                query.append(" AND r.url like ? ");
            }
            if (StringUtils.isNotEmpty(urlSearchForm.getDate())) {
                query.append(" AND r.fecha_hora > ? ");
            }

            query.append("GROUP BY r.url LIMIT ? OFFSET ?");

            ps = conn.prepareStatement(query.toString());

            ps.setLong(paramCount++, idRastreo);

            if (StringUtils.isNotEmpty(urlSearchForm.getUrl())) {
                ps.setString(paramCount++, "%" + urlSearchForm.getUrl() + "%");
            }
            if (StringUtils.isNotEmpty(urlSearchForm.getDate())) {
                ps.setDate(paramCount++, new Date(df.parse(urlSearchForm.getDate()).getTime()));
            }

            ps.setInt(paramCount++, pagSize);
            ps.setInt(paramCount, resultFrom);

            rs = ps.executeQuery();
            while (rs.next()) {
                ResultsByUrlMalware result = new ResultsByUrlMalware();
                result.setUrl(rs.getString("url"));
                result.setMd5(rs.getString("md5"));
                result.setSuspicionLevel("?????");
                result.setCategory(rs.getString("categoria"));
                results.add(result);
            }
        } catch (Exception e) {
            throw new BusinessException(e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return results;
    }

    public static List<MalwareResults> getResultsByModule(Connection conn, Long idCrawler, float minWeight, String[] electionList, int pagina) throws SQLException {

        List<MalwareResults> malwareResultsList = new ArrayList<>();

        PreparedStatement ps = null;
        ResultSet rs = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            int pagSize = Integer.parseInt(pmgr.getValue(CRAWLER_PROPERTIES, "pagination.size"));
            int resultFrom = pagSize * pagina;
            StringBuilder query = new StringBuilder("SELECT * FROM a001_malware_resultados WHERE id_rastreo = ? ");

            for (String election : electionList) {
                query.append(chooseHit(Integer.parseInt(election), true));
            }

            query.append(" LIMIT ? OFFSET ? ");
            ps = conn.prepareStatement(query.toString());
            ps.setLong(1, idCrawler);

            int j;
            for (j = 2; j < electionList.length + 2; j++) {
                ps.setFloat(j, minWeight);
            }

            ps.setInt(j, pagSize);
            ps.setInt(j + 1, resultFrom);
            rs = ps.executeQuery();

            while (rs.next()) {
                MalwareResults malwareResults = new MalwareResults();
                malwareResults.setUrl(rs.getString("Url"));
                malwareResults.setIdUrl(rs.getString("md5"));
                malwareResults.setModuloA(rs.getFloat("ModuloA"));
                malwareResults.setModuloB(rs.getFloat("ModuloB"));
                malwareResults.setModuloC(rs.getFloat("ModuloC"));
                malwareResults.setModuloD(rs.getFloat("ModuloD"));
                malwareResultsList.add(malwareResults);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return malwareResultsList;
    }


    public static int countResultsByModule(Connection conn, Long idCrawler, float minWeight, String[] electionList) throws SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            StringBuilder query = new StringBuilder("SELECT COUNT(*) FROM a001_malware_resultados WHERE id_rastreo = ? ");

            for (String election : electionList) {
                query.append(chooseHit(Integer.parseInt(election), true));
            }

            ps = conn.prepareStatement(query.toString());
            ps.setLong(1, idCrawler);

            for (int j = 2; j < electionList.length + 2; j++) {
                ps.setFloat(j, minWeight);
            }

            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return 0;
    }

    public static List<MalwareResults> getUrlResultsByHit(Connection conn, Long idCrawler, float minWeight, String[] electionList, int pagina) throws SQLException {

        List<MalwareResults> malwareResultsList = new ArrayList<>();

        PreparedStatement ps = null;
        ResultSet rs = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            int pagSize = Integer.parseInt(pmgr.getValue(CRAWLER_PROPERTIES, "pagination.size"));
            int resultFrom = pagSize * pagina;
            StringBuilder query = new StringBuilder("SELECT * FROM a001_malware_resultados WHERE id_rastreo = ? ");

            for (String electionItem : electionList) {
                query.append(chooseHit(Integer.parseInt(electionItem), true));
            }

            query.append(" LIMIT ? OFFSET ? ");
            ps = conn.prepareStatement(query.toString());
            ps.setLong(1, idCrawler);

            int j = 2;
            for (j = 2; j < electionList.length + 2; j++) {
                ps.setFloat(j, minWeight);
            }

            ps.setInt(j, pagSize);
            ps.setInt(j + 1, resultFrom);
            rs = ps.executeQuery();

            while (rs.next()) {
                MalwareResults malwareResults = new MalwareResults();
                malwareResults.setUrl(rs.getString("Url"));
                malwareResults.setIdUrl(rs.getString("md5"));
                malwareResultsList.add(malwareResults);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return malwareResultsList;
    }

    public static MalwareResults getResultsByHit(Connection conn, Long idCrawler, float minWeight, String[] electionList, String md5) throws SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;
        MalwareResults malwareResults = new MalwareResults();

        try {
            StringBuilder query = new StringBuilder("SELECT * FROM a001_malware_resultados WHERE id_rastreo = ? AND md5 = ? ");

            for (String election : electionList) {
                query.append(chooseHit(Integer.parseInt(election), true));
            }

            ps = conn.prepareStatement(query.toString());
            ps.setLong(1, idCrawler);
            ps.setString(2, md5);


            for (int j = 0; j < electionList.length; j++) {
                ps.setFloat(j + 3, minWeight);
            }

            rs = ps.executeQuery();

            if (rs.next()) {
                malwareResults.setUrl(rs.getString("Url"));
                malwareResults.setIdUrl(rs.getString("md5"));
                malwareResults.setModuloA(rs.getFloat("ModuloA"));
                malwareResults.setModuloB(rs.getFloat("ModuloB"));
                malwareResults.setModuloC(rs.getFloat("ModuloC"));
                malwareResults.setModuloD(rs.getFloat("ModuloD"));
                malwareResults.setReintentos(rs.getFloat("Reintentos"));
                malwareResults.setRedirecciones(rs.getFloat("Redirecciones"));
                malwareResults.setTerminosA(rs.getFloat("TerminosA"));
                malwareResults.setOfuscado(rs.getFloat("Ofuscado"));
                malwareResults.setMultimedia(rs.getFloat("Multimedia"));
                malwareResults.setTerminosB(rs.getFloat("TerminosB"));
                malwareResults.setDom(rs.getFloat("DOM"));
                malwareResults.setDominio(rs.getFloat("dominio"));
                malwareResults.setJs(rs.getFloat("JS"));
                malwareResults.setCertificados(rs.getFloat("Certificados"));
                malwareResults.setActionscript(rs.getFloat("ActionScript"));
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return malwareResults;
    }

    public static int countResultsByHit(Connection conn, Long idCrawler, float minWeight, String[] electionList) throws SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            StringBuilder query = new StringBuilder("SELECT COUNT(*) FROM a001_malware_resultados WHERE id_rastreo = ? ");

            for (String electionItem : electionList) {
                query.append(chooseHit(Integer.parseInt(electionItem), true));
            }

            ps = conn.prepareStatement(query.toString());
            ps.setLong(1, idCrawler);

            for (int j = 0; j < electionList.length; j++) {
                ps.setFloat(j + 2, minWeight);
            }

            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return 0;
    }

    public static List<MalwareTermResults> getResultsByTerm(Connection conn, Long idCrawler, int minOccurrence, String[] electionList, int pagina) throws SQLException {
        List<MalwareTermResults> malwareResultsList = new ArrayList<>();

        PreparedStatement ps = null;
        ResultSet rs = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            int pagSize = Integer.parseInt(pmgr.getValue(CRAWLER_PROPERTIES, "pagination.size"));
            int resultFrom = pagSize * pagina;
            StringBuilder query = new StringBuilder("SELECT DISTINCT(mtur.md5) FROM a001_malware_termino_url_rastreo mtur " +
                    "JOIN a001_malware_terminos mt ON (mt.id_termino = mtur.id_termino) " +
                    "WHERE mtur.ocurrencias >= ? AND mt.id_termino IN ( ");

            for (int i = 0; i < electionList.length; i++) {
                if (i < electionList.length - 1) {
                    query.append(electionList[i]).append(", ");
                } else {
                    query.append(electionList[i]).append(" ) ");
                }
            }

            query.append(" AND mtur.id_rastreo = ? ORDER BY MD5 LIMIT ? OFFSET ? ");
            ps = conn.prepareStatement(query.toString());
            ps.setInt(1, minOccurrence);
            ps.setLong(2, idCrawler);
            ps.setInt(3, pagSize);
            ps.setInt(4, resultFrom);
            rs = ps.executeQuery();

            while (rs.next()) {
                MalwareTermResults malwareTermResults = new MalwareTermResults();
                malwareTermResults.setIdUrl(rs.getString("MD5"));
                malwareTermResults.setUrl(getUrlByHash(conn, malwareTermResults.getIdUrl()));
                malwareResultsList.add(malwareTermResults);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return malwareResultsList;
    }

    public static int countResultsByTerm(Connection conn, Long idCrawler, int minOccurrences, String[] electionList) throws SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            StringBuilder query = new StringBuilder("SELECT COUNT(DISTINCT(mtur.md5)) FROM a001_malware_termino_url_rastreo mtur " +
                    "JOIN a001_malware_terminos mt ON (mt.id_termino = mtur.id_termino) " +
                    "WHERE  mtur.ocurrencias >= ? AND mt.id_termino IN ( ");

            for (int i = 0; i < electionList.length; i++) {
                if (i < electionList.length - 1) {
                    query.append(electionList[i]).append(", ");
                } else {
                    query.append(electionList[i]).append(" ) ");
                }
            }

            query.append(" AND mtur.id_rastreo = ? ORDER BY MD5 ");
            ps = conn.prepareStatement(query.toString());
            ps.setInt(1, minOccurrences);
            ps.setLong(2, idCrawler);
            rs = ps.executeQuery();

            if (rs.next()) {
                return (rs.getInt(1));
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return 0;
    }

    public static Map<String, String> getTermList(Connection c, String[] electionList) throws SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            StringBuilder query = new StringBuilder("SELECT Id_Termino, Termino FROM a001_malware_terminos WHERE Id_termino IN (");

            for (int i = 0; i < electionList.length; i++) {
                if (i < electionList.length - 1) {
                    query.append(electionList[i]).append(", ");
                } else {
                    query.append(electionList[i]).append(" ) ");
                }
            }

            ps = c.prepareStatement(query.toString());
            rs = ps.executeQuery();

            HashMap<String, String> urlTerms = new HashMap<>();

            while (rs.next()) {
                urlTerms.put(rs.getString("Id_termino"), rs.getString("Termino"));
            }

            return urlTerms;

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }
        return null;
    }

    public static List<MalwareTerm> getSelectedTermsByUrl(Connection c, String[] idTerm, String md5, Long id, Long occurrences) throws SQLException {

        PreparedStatement ps = null;
        PreparedStatement ps2 = null;
        ResultSet rs = null;
        ResultSet rs2 = null;
        List<MalwareTerm> malwareTermList = new ArrayList<>();

        try {
            StringBuilder query = new StringBuilder("SELECT mt.Id_Termino, mt.Termino, mh.Nombre " +
                    "FROM a001_malware_terminos mt JOIN a001_malware_hits mh ON (mt.Id_Hit = mh.Id_Hit) " +
                    "WHERE mt.Id_Termino IN ( ");

            for (int i = 0; i < idTerm.length; i++) {
                if (i < idTerm.length - 1) {
                    query.append(idTerm[i]).append(", ");
                } else {
                    query.append(idTerm[i]).append(" ) ");
                }
            }

            ps = c.prepareStatement(query.toString());
            rs = ps.executeQuery();
            DAOUtils.closeQueries(ps, rs);

            while (rs.next()) {
                MalwareTerm malwareTerm = new MalwareTerm();
                malwareTerm.setId(rs.getLong("Id_termino"));
                malwareTerm.setTerm(rs.getString("Termino"));
                malwareTerm.setHit(rs.getString("Nombre"));
                malwareTermList.add(malwareTerm);
            }

            ps2 = c.prepareStatement("SELECT Id_Termino, Ocurrencias FROM a001_malware_termino_url_rastreo " +
                    "WHERE  md5 = ? AND id_rastreo = ? ; ");
            ps2.setString(1, md5);
            ps2.setLong(2, id);
            rs2 = ps2.executeQuery();

            HashMap<Long, Long> urlTerms = new HashMap<>();

            while (rs2.next()) {
                urlTerms.put(rs2.getLong("Id_termino"), rs2.getLong("Ocurrencias"));
            }

            for (Iterator<MalwareTerm> it = malwareTermList.iterator(); it.hasNext(); ) {
                MalwareTerm term = it.next();
                if (urlTerms.containsKey(term.getId())) {
                    term.setOccurrences(urlTerms.get(term.getId()));
                } else {
                    term.setOccurrences((long) 0);
                }
                if (term.getOccurrences() < occurrences) {
                    it.remove();
                }
            }

            return malwareTermList;
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
            DAOUtils.closeQueries(ps2, rs2);
        }
        return null;
    }

    public static int countResultsByUrl(Connection conn, Long idRastreo, UrlSearchForm urlSearchForm) throws BusinessException, SQLException {
        PropertiesManager pmgr = new PropertiesManager();
        DateFormat df = new SimpleDateFormat(pmgr.getValue(CRAWLER_PROPERTIES, "date.format.simple"));
        PreparedStatement ps = null;
        ResultSet rs = null;
        int paramCount = 1;
        try {
            StringBuilder query = new StringBuilder("SELECT COUNT(DISTINCT(Url)) " +
                    "FROM a001_malware_ocurrencias o JOIN a001_malware_resultados r ON (o.id_rastreo = r.id_rastreo) " +
                    "WHERE r.id_rastreo = ?");

            if (StringUtils.isNotEmpty(urlSearchForm.getUrl())) {
                query.append(" AND r.url like ? ");
            }
            if (StringUtils.isNotEmpty(urlSearchForm.getDate())) {
                query.append(" AND r.fecha_hora > ? ");
            }

            ps = conn.prepareStatement(query.toString());
            ps.setLong(paramCount++, idRastreo);

            if (StringUtils.isNotEmpty(urlSearchForm.getUrl())) {
                ps.setString(paramCount++, "%" + urlSearchForm.getUrl() + "%");
            }
            if (StringUtils.isNotEmpty(urlSearchForm.getDate())) {
                ps.setDate(paramCount, new Date(df.parse(urlSearchForm.getDate()).getTime()));
            }

            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (Exception e) {
            throw new BusinessException(e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return 0;
    }

    /*public static List<TerminoMalware> obtenerDetalle(Connection conn, String url, long idRastreo) throws BusinessException, SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;
        List<TerminoMalware> detalleTerminos = new ArrayList<TerminoMalware>();
        try {
            ps = conn.prepareStatement("SELECT DISTINCT(tu.id_termino), t.Termino, tu.Ocurrencias " +
                    "FROM a001_malware_terminos t JOIN a001_malware_termino_url_rastreo tu " +
                    "ON (t.id_termino = tu.id_termino) " +
                    "WHERE (tu.id_rastreo = ? AND tu.MD5 = md5(?))");

            ps.setLong(1, idRastreo);
            ps.setString(2, url);

            rs = ps.executeQuery();

            while (rs.next()) {
                TerminoMalware terminoMalware = new TerminoMalware();
                terminoMalware.setTermino(rs.getString("Termino"));
                terminoMalware.setId(rs.getLong("Id_termino"));
                terminoMalware.setNumeroOcurrencias(rs.getLong("Ocurrencias"));
                detalleTerminos.add(terminoMalware);
            }

        } catch (Exception e) {
            throw new BusinessException(e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        } // end finally

        return detalleTerminos;

    }*/

    /*public static DetalleRastreo getCrawlerDetail(Connection c, long idExecution) throws BusinessException, SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;
        DetalleRastreo detalleRastreo = new DetalleRastreo();

        try {
            ps = c.prepareStatement("SELECT r.id_rastreo, r.nombre_rastreo, u.usuario AS login, r.fecha " +
                    "FROM rastreos_realizados rr JOIN rastreo r ON (rr.id_rastreo = r.id_rastreo) " +
                    "JOIN usuario u ON (u.id_usuario = rr.id_usuario)" +
                    "WHERE rr.id = ? ");
            ps.setLong(1, idExecution);
            rs = ps.executeQuery();

            if (rs.next()) {
                //Código del rastreo
                String nombreRastreo = rs.getString("nombre_rastreo");
                if (nombreRastreo.contains("-")) {
                    nombreRastreo = nombreRastreo.substring(0, nombreRastreo.indexOf('-'));
                }
                detalleRastreo.setEntidad(nombreRastreo);
                detalleRastreo.setLoginUsuario(rs.getString("login"));
                detalleRastreo.setId_rastreo(rs.getLong("id_rastreo"));
                detalleRastreo.setFecha(rs.getDate("fecha"));
            }

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        } // end finally

        return detalleRastreo;
    }*/

    /*public static DetalleRastreo getCrawlerTermDetails(Connection c, long idExecution, DetalleRastreo detalleRastreo) throws BusinessException, SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT COUNT(DISTINCT tu.ID_TERMINO) AS TOTAL_TERMINOS, " +
                    "SUM(tu.Ocurrencias) AS TOTAL_OCURRENCIAS " +
                    "FROM a001_malware_termino_url_rastreo tu " +
                    "WHERE tu.id_rastreo = ?; ");
            ps.setLong(1, idExecution);
            rs = ps.executeQuery();

            if (rs.next()) {
                detalleRastreo.setNumeroTerminosLocalizados(rs.getLong("TOTAL_TERMINOS"));
                detalleRastreo.setNumeroTerminosOcurrentes(rs.getLong("TOTAL_OCURRENCIAS"));
            }

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return detalleRastreo;
    }*/

    public static List<MalwareHit> getHitsByModule(Connection c, int idModule) throws BusinessException, SQLException {
        return getHitsByModule(c, idModule, null, null);
    }

    public static List<MalwareHit> getHitsByModule(Connection c, int idModule, String md5, Long idRastreo) throws BusinessException, SQLException {
        List<MalwareHit> results = new ArrayList<>();

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT mh.*, mt.termino FROM a001_malware_hits mh " +
                    " LEFT JOIN a001_malware_terminos mt ON (mt.id_hit = mh.id_hit)" +
                    " WHERE mh.hit_padre = (SELECT mh.nombre FROM a001_malware_hits mh WHERE mh.id_hit = ?) " +
                    " GROUP BY mh.id_hit");
            ps.setLong(1, idModule);
            rs = ps.executeQuery();

            while (rs.next()) {
                MalwareHit malwareHit = new MalwareHit();
                malwareHit.setId(rs.getInt("id_hit"));
                malwareHit.setName(rs.getString("nombre"));
                malwareHit.setWeight(rs.getBigDecimal("peso").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareHit.setConfidence(rs.getBigDecimal("pconfianza").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareHit.setNormalizedWeight(rs.getBigDecimal("peso_normalizado").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareHit.setValue(rs.getString("termino"));

                if (md5 != null) {
                    malwareHit.setScore(loadScore(c, malwareHit.getId(), md5, idRastreo));
                }

                results.add(malwareHit);
            }

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return results;
    }

    public static MalwareHit getHitById(Connection c, int idHit) throws BusinessException, SQLException {

        return getHitById(c, idHit, null, null);

    }

    public static MalwareHit getHitById(Connection c, int idHit, String md5, Long idRastreo) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT * FROM a001_malware_hits WHERE id_hit = ?");
            ps.setLong(1, idHit);
            rs = ps.executeQuery();

            if (rs.next()) {
                MalwareHit malwareHit = new MalwareHit();
                malwareHit.setId(rs.getInt("id_hit"));
                malwareHit.setName(rs.getString("nombre"));
                malwareHit.setWeight(rs.getBigDecimal("peso").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareHit.setConfidence(rs.getBigDecimal("pconfianza").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareHit.setNormalizedWeight(rs.getBigDecimal("peso_normalizado").setScale(2, BigDecimal.ROUND_HALF_UP));

                if (md5 != null) {
                    malwareHit.setScore(loadScore(c, malwareHit.getId(), md5, idRastreo));
                }

                return malwareHit;
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return null;
    }

    private static float loadScore(Connection c, int idHit, String md5, long idRastreo) throws SQLException {

        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            String query = "SELECT " + chooseHit(idHit, false) + " FROM a001_malware_resultados WHERE MD5 = ? AND Id_rastreo = ?";
            ps = c.prepareStatement(query);
            ps.setString(1, md5);
            ps.setLong(2, idRastreo);

            rs = ps.executeQuery();
            if (rs.next()) {
                return (rs.getFloat(1));
            }

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return 0;
    }

    private static String chooseHit(int idHit, boolean addParam) {

        PropertiesManager pmgr = new PropertiesManager();

        String cadena = "";

        if (addParam) {
            cadena = cadena + " AND ";
        }

        if (Long.parseLong(pmgr.getValue("malware.properties", "modulo.a.hit.id")) == idHit) {
            cadena = cadena + " ModuloA ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "modulo.b.hit.id")) == idHit) {
            cadena = cadena + " ModuloB ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "modulo.c.hit.id")) == idHit) {
            cadena = cadena + " ModuloC ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "modulo.d.hit.id")) == idHit) {
            cadena = cadena + " ModuloD ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "reintentos.hit.id")) == idHit) {
            cadena = cadena + " Reintentos ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "redirecciones.hit.id")) == idHit) {
            cadena = cadena + " Redirecciones ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "terminos.a.hit.id")) == idHit) {
            cadena = cadena + " TerminosA ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "ofuscado.hit.id")) == idHit) {
            cadena = cadena + " Ofuscado ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "multimedia.hit.id")) == idHit) {
            cadena = cadena + " Multimedia ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "terminos.b.hit.id")) == idHit) {
            cadena = cadena + " TerminosB ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "dom.hit.id")) == idHit) {
            cadena = cadena + " DOM ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "dominio.wl.hit.id")) == idHit) {
            cadena = cadena + " Dominio ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "dominio.bl.hit.id")) == idHit) {
            cadena = cadena + " Dominio ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "javascript.hit.id")) == idHit) {
            cadena = cadena + " JS ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "certificados.wl.hit.id")) == idHit) {
            cadena = cadena + " Certificados ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "certificados.bl.hit.id")) == idHit) {
            cadena = cadena + " Certificados ";
        } else if (Long.parseLong(pmgr.getValue("malware.properties", "actionscript.hit.id")) == idHit) {
            cadena = cadena + " ActionScript ";
        }

        if (addParam) {
            cadena = cadena + " >= ?";
        }
        return cadena;
    }

    public static List<MalwareTerm> getTermsByModule(Connection c, int idHit, int pagina) throws BusinessException, SQLException {
        List<MalwareTerm> results = new ArrayList<>();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            PropertiesManager pmgr = new PropertiesManager();
            int pagSize = Integer.parseInt(pmgr.getValue(CRAWLER_PROPERTIES, "pagination.size"));
            int resultFrom = pagSize * pagina;

            ps = c.prepareStatement("SELECT * FROM a001_malware_terminos WHERE id_hit = ? LIMIT ? OFFSET ?");
            ps.setLong(1, idHit);
            ps.setInt(2, pagSize);
            ps.setInt(3, resultFrom);
            rs = ps.executeQuery();

            while (rs.next()) {
                MalwareTerm malwareTerm = new MalwareTerm();
                malwareTerm.setId(rs.getLong("id_termino"));
                malwareTerm.setTerm(rs.getString("termino"));
                malwareTerm.setWeight(rs.getBigDecimal("peso").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareTerm.setConfidence(rs.getBigDecimal("pconfianza").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareTerm.setNormalizedWeight(rs.getBigDecimal("peso_normalizado").setScale(2, BigDecimal.ROUND_HALF_UP));
                results.add(malwareTerm);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return results;
    }

    public static Long getOnlyTerms(Connection conn, long id) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = conn.prepareStatement("SELECT Id_Termino FROM a001_malware_terminos WHERE id_hit = ? ");
            ps.setLong(1, id);
            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getLong(1);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return null;
    }

    public static List<MalwareTerm> getTerms(Connection c) throws SQLException {
        List<MalwareTerm> results = new ArrayList<>();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {

            List<String> hitWithOnlyTerm = MalwareUtils.getHitWithOnlyTerm();

            StringBuilder query = new StringBuilder("SELECT * FROM a001_malware_terminos WHERE id_hit NOT IN ( ");

            int contador = hitWithOnlyTerm.size();

            for (String id : hitWithOnlyTerm) {
                if (contador > 1) {
                    query.append(id).append(", ");
                } else {
                    query.append(id).append(" ) ");
                }
                contador--;
            }

            ps = c.prepareStatement(query.toString());
            rs = ps.executeQuery();


            while (rs.next()) {
                MalwareTerm malwareTerm = new MalwareTerm();
                malwareTerm.setId(rs.getLong("id_termino"));
                malwareTerm.setTerm(rs.getString("termino"));
                //malwareTerm.setWeight(rs.getBigDecimal("peso").setScale(2, BigDecimal.ROUND_HALF_UP));
                //malwareTerm.setConfidence(rs.getBigDecimal("pconfianza").setScale(2, BigDecimal.ROUND_HALF_UP));
                //malwareTerm.setNormalizedWeight(rs.getBigDecimal("peso_normalizado").setScale(2, BigDecimal.ROUND_HALF_UP));
                results.add(malwareTerm);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return results;
    }

    public static void saveModuleTerm(Connection c, MalwareTerm term, int idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;

        try {
            ps = c.prepareStatement("INSERT INTO a001_malware_terminos (termino,id_hit,peso,pconfianza,peso_normalizado) VALUES (?,?,?,?,?)");
            ps.setString(1, term.getTerm());
            ps.setInt(2, idHit);
            ps.setBigDecimal(3, term.getWeight());
            ps.setBigDecimal(4, term.getConfidence());
            ps.setBigDecimal(5, term.getNormalizedWeight());

            ps.executeUpdate();

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static void deleteTerm(Connection c, int idTerm) throws SQLException {
        PreparedStatement ps = null;

        try {
            ps = c.prepareStatement("DELETE FROM a001_malware_terminos WHERE id_Termino = ?");
            ps.setInt(1, idTerm);
            ps.executeUpdate();
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static void updateModuleTerm(Connection c, MalwareTerm term, int idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;

        try {
            ps = c.prepareStatement("UPDATE a001_malware_terminos SET termino = ?, id_hit = ?, peso = ?, pconfianza = ?, peso_normalizado = ? WHERE id_termino = ?");
            ps.setString(1, term.getTerm());
            ps.setInt(2, idHit);
            ps.setBigDecimal(3, term.getWeight());
            ps.setBigDecimal(4, term.getConfidence());
            ps.setBigDecimal(5, term.getNormalizedWeight());
            ps.setLong(6, term.getId());

            ps.executeUpdate();

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static MalwareTerm getTermById(Connection c, long idTerm) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT * FROM a001_malware_terminos WHERE id_termino = ?");
            ps.setLong(1, idTerm);
            rs = ps.executeQuery();

            if (rs.next()) {
                MalwareTerm malwareTerm = new MalwareTerm();
                malwareTerm.setId(rs.getLong("id_termino"));
                malwareTerm.setTerm(rs.getString("termino"));
                malwareTerm.setWeight(rs.getBigDecimal("peso").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareTerm.setConfidence(rs.getBigDecimal("pconfianza").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareTerm.setNormalizedWeight(rs.getBigDecimal("peso_normalizado").setScale(2, BigDecimal.ROUND_HALF_UP));
                return malwareTerm;
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return null;
    }

    public static MalwareTerm getTermByIdFromUrl(Connection c, long idTerm, String md5, long idCrawler) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        MalwareTerm malwareTerm = new MalwareTerm();

        try {
            ps = c.prepareStatement("SELECT * FROM a001_malware_termino_url_rastreo mtur " +
                    "JOIN a001_malware_terminos mt ON (mt.Id_Termino = mtur.Id_Termino)" +
                    "WHERE mtur.id_termino = ? AND mtur.id_rastreo = ? AND mtur.md5 = ? ");
            ps.setLong(1, idTerm);
            ps.setLong(2, idCrawler);
            ps.setString(3, md5);
            rs = ps.executeQuery();

            if (rs.next()) {
                malwareTerm.setId(rs.getLong("Id_Termino"));
                malwareTerm.setTerm(rs.getString("Termino"));
                malwareTerm.setOccurrences(rs.getLong("Ocurrencias"));
                return malwareTerm;
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return malwareTerm;
    }

    public static MalwareTerm getTermByIdHit(Connection c, long idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT * FROM a001_malware_terminos WHERE id_hit = ?");
            ps.setLong(1, idHit);
            rs = ps.executeQuery();

            if (rs.next()) {
                MalwareTerm malwareTerm = new MalwareTerm();
                malwareTerm.setId(rs.getLong("id_termino"));
                malwareTerm.setTerm(rs.getString("termino"));
                malwareTerm.setWeight(rs.getBigDecimal("peso").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareTerm.setConfidence(rs.getBigDecimal("pconfianza").setScale(2, BigDecimal.ROUND_HALF_UP));
                malwareTerm.setNormalizedWeight(rs.getBigDecimal("peso_normalizado").setScale(2, BigDecimal.ROUND_HALF_UP));
                return malwareTerm;
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return null;
    }

    public static Double getWeightSum(Connection conn, int table) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            if (table == 1) {
                ps = conn.prepareStatement("SELECT SUM(peso) FROM a001_malware_terminos;");
            } else {
                ps = conn.prepareStatement("SELECT SUM(peso) FROM a001_malware_hits;");
            }
            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getDouble(1);
            }
        } catch (Exception e) {
            Logger.putLog("Error al intentar normalizar los pesos de los términos: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return (double) 0;
    }

    public static void normalizeWeights(Connection conn, Double weightSum, int table) throws BusinessException, SQLException {
        PreparedStatement ps = null;

        try {
            if (table == 1) {
                ps = conn.prepareStatement("UPDATE a001_malware_terminos SET peso_normalizado = (peso / ?);");
            } else {
                ps = conn.prepareStatement("UPDATE a001_malware_hits SET peso_normalizado = (peso / ?);");
            }
            ps.setDouble(1, weightSum);
            ps.executeUpdate();
        } catch (Exception e) {
            Logger.putLog("Error al intentar normalizar los pesos de los términos: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    private static void updateHit(Connection c, String weight, String confidence, int idHit) throws SQLException {
        PreparedStatement ps = null;
        try {

            ps = c.prepareStatement("UPDATE a001_malware_hits SET peso = ?, pconfianza = ?, peso_normalizado = ? WHERE id_hit = ?");
            ps.setString(1, weight);
            ps.setString(2, confidence);
            ps.setString(3, weight);
            ps.setInt(4, idHit);
            ps.executeUpdate();

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    private static void updateTerm(Connection c, String termino, String weight, String confidence, int idTerm) throws SQLException {
        PreparedStatement ps = null;
        try {

            if (termino != null) {
                ps = c.prepareStatement("UPDATE a001_malware_terminos SET Termino = ? WHERE id_hit = ? ");
                ps.setString(1, termino);
                ps.setInt(2, idTerm);
            } else {
                ps = c.prepareStatement("UPDATE a001_malware_terminos SET  peso = ?, pConfianza = ?, peso_normalizado = ? WHERE id_hit = ? ");
                ps.setString(1, weight);
                ps.setString(2, confidence);
                ps.setString(3, weight);
                ps.setInt(4, idTerm);
            }

            ps.executeUpdate();

        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static void updateModuleA(Connection c, ConfigAForm configAForm, int idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            c.setAutoCommit(false);

            //Modificamos los datos del modulo
            updateHit(c, configAForm.getWeight(), configAForm.getConfidence(), idHit);

            //Modificamos los datos de reintentos
            int nRetriesId = Integer.parseInt(pmgr.getValue("malware.properties", "reintentos.hit.id"));
            updateHit(c, configAForm.getWeightRetries(), configAForm.getConfidenceRetries(), nRetriesId);
            if (getTermByIdHit(c, nRetriesId) != null) {
                updateTerm(c, configAForm.getNumRetries(), "0", "0", nRetriesId);
            } else {
                saveTerm(c, "0", "0", nRetriesId, configAForm.getNumRetries());
            }

            //Modificamos el número de redirecciones
            int nRedirectionsId = Integer.parseInt(pmgr.getValue("malware.properties", "redirecciones.hit.id"));
            updateHit(c, configAForm.getWeightRedirections(), configAForm.getConfidenceRedirections(), nRedirectionsId);
            if (getTermByIdHit(c, nRedirectionsId) != null) {
                updateTerm(c, configAForm.getNumRedirections(), "0", "0", nRedirectionsId);
            } else {
                saveTerm(c, "0", "0", nRetriesId, configAForm.getNumRedirections());
            }
            //Modificamos los datos de los términos
            int nTermsId = Integer.parseInt(pmgr.getValue("malware.properties", "terminos.a.hit.id"));
            updateTerm(c, null, configAForm.getWeightTerms(), configAForm.getConfidenceTerms(), nTermsId);
            updateHit(c, configAForm.getWeightTerms(), configAForm.getConfidenceTerms(), nTermsId);

            Double weightSum = getWeightSum(c, 1);
            Double weightHitSum = getWeightSum(c, 0);

            MalwareDao.normalizeWeights(c, weightSum, 1);
            MalwareDao.normalizeWeights(c, weightHitSum, 0);

            c.commit();

        } catch (Exception e) {
            c.rollback();
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    private static void saveTerm(Connection c, String confidence, String weight, int id, String term) throws BusinessException, SQLException {
        MalwareTerm malwareTerm = new MalwareTerm();
        BigDecimal bigDecimalConfidence = new BigDecimal(confidence);
        BigDecimal bigDecimalWeight = new BigDecimal(weight);
        malwareTerm.setConfidence(bigDecimalConfidence);
        malwareTerm.setId((long) id);
        malwareTerm.setNormalizedWeight(bigDecimalWeight);
        malwareTerm.setTerm(term);
        malwareTerm.setWeight(bigDecimalWeight);
        saveModuleTerm(c, malwareTerm, id);
    }

    public static void updateModuleB(Connection c, ConfigBForm configBForm, int idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            c.setAutoCommit(false);

            //Modificamois los datos del modulo
            updateHit(c, configBForm.getWeight(), configBForm.getConfidence(), idHit);

            //Modificamos los datos multimedia
            int multimediaId = Integer.parseInt(pmgr.getValue("malware.properties", "multimedia.hit.id"));
            updateHit(c, configBForm.getMultimediaWeight(), configBForm.getMultimediaConfidence(), multimediaId);
            if (getTermByIdHit(c, multimediaId) != null) {
                updateTerm(c, pmgr.getValue("malware.properties", "mime.type.file.path") + configBForm.getMultimediaString(), "0", "0", multimediaId);
            } else {
                saveTerm(c, "0", "0", multimediaId, pmgr.getValue("malware.properties", "mime.type.file.path") + configBForm.getMultimediaString());
            }

            //Modificamos los datos script
            int scriptsId = Integer.parseInt(pmgr.getValue("malware.properties", "ofuscado.hit.id"));
            updateHit(c, configBForm.getObfuscatedWeight(), configBForm.getObfuscatedConfidence(), scriptsId);

            //Modificamos los tados de los terminos
            int termsId = Integer.parseInt(pmgr.getValue("malware.properties", "terminos.b.hit.id"));
            updateHit(c, configBForm.getTermsWeight(), configBForm.getTermsConfidence(), termsId);

            //Modificamos los datos de los DOM
            int domId = Integer.parseInt(pmgr.getValue("malware.properties", "dom.hit.id"));
            updateHit(c, configBForm.getDomWeight(), configBForm.getDomConfidence(), domId);

            Double weightSum = getWeightSum(c, 1);
            Double weightHitSum = getWeightSum(c, 0);

            MalwareDao.normalizeWeights(c, weightSum, 1);
            MalwareDao.normalizeWeights(c, weightHitSum, 0);

            c.commit();
        } catch (Exception e) {
            c.rollback();
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static void updateModuleC(Connection c, ConfigCForm configCForm, int idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            c.setAutoCommit(false);

            //Modificamois los datos del modulo
            updateHit(c, configCForm.getWeight(), configCForm.getConfidence(), idHit);

            //Modificamos los datos de las listas blanca y negra
            int blackListId = Integer.parseInt(pmgr.getValue("malware.properties", "dominio.bl.hit.id"));
            if (getTermByIdHit(c, blackListId) != null) {
                updateTerm(c, pmgr.getValue("malware.properties", "domains.bl.file.path") + configCForm.getBlackList(), "0", "0", blackListId);
            } else {
                saveTerm(c, "0", "0", blackListId, pmgr.getValue("malware.properties", "domains.bl.file.path") + configCForm.getBlackList());
            }
            updateHit(c, configCForm.getBlackListWeight(), configCForm.getBlackListConfidence(), blackListId);

            int whiteListId = Integer.parseInt(pmgr.getValue("malware.properties", "dominio.wl.hit.id"));
            if (getTermByIdHit(c, whiteListId) != null) {
                updateTerm(c, pmgr.getValue("malware.properties", "domains.wl.file.path") + configCForm.getWhiteList(), "0", "0", whiteListId);
            } else {
                saveTerm(c, "0", "0", whiteListId, pmgr.getValue("malware.properties", "domains.wl.file.path") + configCForm.getWhiteList());
            }
            updateHit(c, configCForm.getWhiteListWeight(), configCForm.getWhiteListConfidence(), whiteListId);

            Double weightSum = getWeightSum(c, 1);
            Double weightHitSum = getWeightSum(c, 0);

            MalwareDao.normalizeWeights(c, weightSum, 1);
            MalwareDao.normalizeWeights(c, weightHitSum, 0);

            c.commit();
        } catch (Exception e) {
            c.rollback();
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static void updateModuleD(Connection c, ConfigDForm configDForm, int idHit) throws BusinessException, SQLException {
        PreparedStatement ps = null;
        PropertiesManager pmgr = new PropertiesManager();

        try {
            c.setAutoCommit(false);

            //Modificamos los datos del modulo
            updateHit(c, configDForm.getWeight(), configDForm.getConfidence(), idHit);

            //Modificamos los datos de JavaScriprt
            int javaScriptId = Integer.parseInt(pmgr.getValue("malware.properties", "javascript.hit.id"));
            updateHit(c, configDForm.getJavascriptWeight(), configDForm.getJavascriptConfidence(), javaScriptId);

            //Modificamos los datos de ActionScript
            int actionScriptId = Integer.parseInt(pmgr.getValue("malware.properties", "actionscript.hit.id"));
            updateHit(c, configDForm.getActionscriptWeight(), configDForm.getActionscriptConfidence(), actionScriptId);

            //Modificamos los datos de lista blanca de certificados
            int whiteListCertId = Integer.parseInt(pmgr.getValue("malware.properties", "certificados.wl.hit.id"));
            if (getTermByIdHit(c, whiteListCertId) != null) {
                updateTerm(c, pmgr.getValue("malware.properties", "certificates.wl.file.path") + configDForm.getCertWhiteList(), "0", "0", whiteListCertId);
            } else {
                saveTerm(c, "0", "0", whiteListCertId, pmgr.getValue("malware.properties", "certificates.wl.file.path") + configDForm.getCertWhiteList());
            }
            updateHit(c, configDForm.getCertWhiteListWeight(), configDForm.getCertWhiteListConfidence(), whiteListCertId);

            //Modificamos los datos de lista negra de certificados
            int blackListCertId = Integer.parseInt(pmgr.getValue("malware.properties", "certificados.bl.hit.id"));
            if (getTermByIdHit(c, blackListCertId) != null) {
                updateTerm(c, pmgr.getValue("malware.properties", "certificates.bl.file.path") + configDForm.getCertBlackList(), "0", "0", blackListCertId);
            } else {
                saveTerm(c, "0", "0", blackListCertId, pmgr.getValue("malware.properties", "certificates.bl.file.path") + configDForm.getCertBlackList());
            }
            updateHit(c, configDForm.getCertBlackListWeight(), configDForm.getCertBlackListConfidence(), blackListCertId);

            //Se normalizan los terminos
            Double weightSum = getWeightSum(c, 1);
            Double weightHitSum = getWeightSum(c, 0);

            MalwareDao.normalizeWeights(c, weightSum, 1);
            MalwareDao.normalizeWeights(c, weightHitSum, 0);

            c.commit();
        } catch (Exception e) {
            c.rollback();
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static List<MalwareTerm> getTermsOccurrencesByModule(Connection c, int idHit, String url, long idRastreo) throws BusinessException, SQLException {
        List<MalwareTerm> results = new ArrayList<>();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            if (url != null) {
                ps = c.prepareStatement("SELECT mt.id_termino, mo.termino, mo.ocurrencias FROM a001_malware_ocurrencias mo " +
                        "JOIN a001_malware_hits mh ON (mo.hit_padre = mh.nombre) " +
                        "JOIN a001_malware_terminos mt ON (mo.termino = mt.termino) " +
                        "WHERE mh.id_hit = ? AND mo.md5 = ? AND mo.id_rastreo = ?");

                ps.setInt(1, idHit);
                ps.setString(2, url);
                ps.setLong(3, idRastreo);

                rs = ps.executeQuery();
            } else {
                ps = c.prepareStatement("SELECT mt.id_termino, mo.termino, mo.ocurrencias FROM a001_malware_ocurrencias mo " +
                        "JOIN a001_malware_hits mh ON (mo.hit_padre = mh.nombre) " +
                        "JOIN a001_malware_terminos mt ON (mo.termino = mt.termino) " +
                        "WHERE mh.id_hit = ? AND mo.id_rastreo = ?");

                ps.setInt(1, idHit);
                ps.setLong(2, idRastreo);

                rs = ps.executeQuery();
            }

            while (rs.next()) {
                MalwareTerm malwareTerm = new MalwareTerm();
                malwareTerm.setId(rs.getLong("id_termino"));
                malwareTerm.setTerm(rs.getString("termino"));
                malwareTerm.setOccurrences(rs.getLong("ocurrencias"));
                results.add(malwareTerm);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return results;
    }

    public static long getModuleOccurrences(Connection c, int idHit, long idRastreo) throws BusinessException, SQLException {
        Long occurrences = (long) 0;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT SUM(ocurrencias) as ocurrencias FROM a001_malware_ocurrencias mo " +
                    "JOIN a001_malware_hits mh ON (mo.hit_padre = mh.nombre) " +
                    "WHERE mh.id_hit = ? AND mo.id_rastreo = ?");

            ps.setLong(1, idHit);
            ps.setLong(2, idRastreo);

            rs = ps.executeQuery();

            if (rs.next()) {
                occurrences = (rs.getLong("ocurrencias"));
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return occurrences;
    }

    public static void deleteResult(Connection c, long idRastreo, String url) throws SQLException {
        PreparedStatement ps = null;

        try {
            ps = c.prepareStatement("DELETE FROM a001_malware_resultados WHERE md5 = ? AND id_rastreo = ?");
            ps.setString(1, url);
            ps.setLong(2, idRastreo);
            ps.executeUpdate();
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, null);
        }
    }

    public static String getUrlByHash(Connection c, String hash) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT url FROM a001_malware_resultados WHERE md5 = ? LIMIT 1");
            ps.setString(1, hash);
            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getString("url");
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return null;
    }

    public static List<MalwareTermResults> getTermsByUrl(Connection c, long idTerm, long idRastreo) throws BusinessException, SQLException {
        List<MalwareTermResults> results = new ArrayList<>();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = c.prepareStatement("SELECT mr.url, mtur.ocurrencias FROM a001_malware_termino_url_rastreo mtur " +
                    "JOIN a001_malware_resultados mr ON (mtur.md5 = mr.md5 AND mtur.id_rastreo = mr.id_rastreo) " +
                    "WHERE mtur.id_termino = ? AND mtur.id_rastreo = ?");

            ps.setLong(1, idTerm);
            ps.setLong(2, idRastreo);

            rs = ps.executeQuery();

            while (rs.next()) {
                MalwareTermResults malwareTermResult = new MalwareTermResults();
                malwareTermResult.setUrl(rs.getString("url"));
                malwareTermResult.setOccurrences(rs.getLong("ocurrencias"));
                results.add(malwareTermResult);
            }
        } catch (Exception e) {
            Logger.putLog("Exception: ", MalwareDao.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            DAOUtils.closeQueries(ps, rs);
        }

        return results;
    }

}
