package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.plugin.dao.DataBaseManager;
import es.inteco.rastreador2.dao.rastreo.RastreoDAO;
import es.inteco.rastreador2.malware.actionform.ResultsByUrlMalware;
import es.inteco.rastreador2.malware.actionform.UrlSearchForm;
import es.inteco.rastreador2.malware.dao.MalwareDao;
import es.inteco.rastreador2.malware.dao.MalwareHit;
import es.inteco.rastreador2.utils.CrawlerUtils;
import es.inteco.rastreador2.utils.Pagination;
import org.apache.struts.action.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import static es.inteco.common.Constants.CRAWLER_PROPERTIES;

/**
 * Clase InformesDispatchAction.
 * Action de Informes
 *
 * @author psanchez
 */
public class MalwareAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception {
        if (CrawlerUtils.hasAccess(request, "show.crawler.results")) {
            Connection c = null;
            try {
                c = DataBaseManager.getConnection();
                String user = (String) request.getSession().getAttribute(Constants.USER);
                long idRastreo = Long.parseLong(request.getParameter(Constants.ID_RASTREO));
                //Comprobamos que el usuario esta asociado con los resultados de los rastreos que quiere recuperar
                if (RastreoDAO.crawlerToUser(c, idRastreo, user) || RastreoDAO.crawlerToClientAccount(c, idRastreo, user)) {
                    if (request.getParameter(Constants.ACCION).equals(Constants.RESULTS_BY_URL)) {
                        return getResultsByUrl(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.URL_DETAIL)) {
                        return getUrlDetail(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.DELETE_RESULT)) {
                        return deleteResult(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.DELETE_CONFIRMATION)) {
                        return deleteConfirmation(mapping, form, request, response);
                    }
                }
            } catch (Exception e) {
                Logger.putLog("Excepcion: ", MalwareAction.class, Logger.LOG_LEVEL_ERROR, e);
                return mapping.findForward(Constants.ERROR);
            } finally {
                DataBaseManager.closeConnection(c);
            }
        } else {
            return mapping.findForward(Constants.NO_PERMISSION);
        }

        return null;
    }

    public ActionForward getResultsByUrl(ActionMapping mapping, ActionForm form,
                                         HttpServletRequest request, HttpServletResponse response) throws Exception {

        UrlSearchForm urlSearchForm = (UrlSearchForm) form;
        ActionErrors errors = urlSearchForm.validate(mapping, request);
        if (errors != null && !errors.isEmpty()) {
            saveErrors(request.getSession(), errors);
            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            long idRastreo = Long.parseLong(request.getParameter(Constants.ID_RASTREO));
            ActionForward forward = new ActionForward(mapping.getInputForward());
            forward.setPath(forward.getPath() + "&" + Constants.ID_RASTREO + "=" + idRastreo + "&" + Constants.ID + "=" + idExecution);
            forward.setRedirect(true);
            return forward;
        } else {
            PropertiesManager pmgr = new PropertiesManager();
            Connection c = null;
            try {
                c = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

                long idExecution = Long.parseLong(request.getParameter(Constants.ID));

                int numResults = MalwareDao.countResultsByUrl(c, idExecution, urlSearchForm);
                int pagina = Pagination.getPage(request, Constants.PAG_PARAM);

                List<ResultsByUrlMalware> results = MalwareDao.getResultsByUrl(c, idExecution, urlSearchForm, (pagina - 1));
                request.setAttribute(Constants.RESULTS_BY_URL, results);
                request.setAttribute(Constants.LIST_PAGE_LINKS, Pagination.createPagination(request, numResults, pagina));

                return mapping.findForward(Constants.RESULTS_BY_URL);
            } catch (Exception e) {
                Logger.putLog("Excepcion: ", MalwareAction.class, Logger.LOG_LEVEL_ERROR, e);
                return mapping.findForward(Constants.ERROR);
            } finally {
                DataBaseManager.closeConnection(c);
            }
        }
    }

    public ActionForward getUrlDetail(ActionMapping mapping, ActionForm form,
                                      HttpServletRequest request, HttpServletResponse response) throws Exception {

        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        try {
            c = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            String[] idHits = {pmgr.getValue("malware.properties", "modulo.a.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.b.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.c.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.d.hit.id")};

            List<MalwareHit> modules = new ArrayList<MalwareHit>();
            for (int i = 0; i < idHits.length; i++) {
                MalwareHit module = MalwareDao.getHitById(c, Integer.parseInt(idHits[i]));
                module.setSubhits(MalwareDao.getHitsByModule(c, module.getId()));
                modules.add(module);
            }

            // Añadimos las ocurrencias de los términos en aquellos hits que tengan
            String url = request.getParameter(Constants.URL);
            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            addTermOccurrences(c, modules, idExecution, url);

            request.setAttribute(Constants.MODULES, modules);

            request.setAttribute(Constants.URL, MalwareDao.getUrlByHash(c, url));

            return mapping.findForward(Constants.URL_DETAIL);

        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
        }
    }

    private void addTermOccurrences(Connection conn, List<MalwareHit> modules, long idExecution, String url) {
        PropertiesManager pmgr = new PropertiesManager();
        List<String> hitWithTerms = new ArrayList<String>();
        hitWithTerms.add(pmgr.getValue("malware.properties", "terminos.a.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "ofuscado.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "terminos.b.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "dom.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "javascript.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "actionscript.hit.id"));

        for (MalwareHit module : modules) {
            for (MalwareHit submodule : module.getSubhits()) {
                try {
                    if (hitWithTerms.contains(String.valueOf(submodule.getId()))) {
                        submodule.setTerms(MalwareDao.getTermsOccurrencesByModule(conn, submodule.getId(), url, idExecution));
                    }
                } catch (Exception e) {
                    Logger.putLog("Excepcion: ", MalwareAction.class, Logger.LOG_LEVEL_ERROR, e);
                }
            }
        }
    }

    public ActionForward deleteResult(ActionMapping mapping, ActionForm form,
                                      HttpServletRequest request, HttpServletResponse response) throws Exception {

        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        long idExecution = Long.parseLong(request.getParameter(Constants.ID));
        long idRastreo = Long.parseLong(request.getParameter(Constants.ID_RASTREO));
        String url = request.getParameter(Constants.URL);

        try {
            c = DataBaseManager.getConnection(pmgr.getValue(CRAWLER_PROPERTIES, "datasource.name.malware"));

            MalwareDao.deleteResult(c, idExecution, url);

        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
        }

        // return getResultsByUrl(mapping, form, request, response);
        ActionForward forward = new ActionForward(mapping.findForward("showMalwareResultsByUrl"));
        forward.setPath(forward.getPath() + "&" + Constants.ID + "=" + idExecution + "&" + Constants.ID_RASTREO + "=" + idRastreo);
        forward.setRedirect(true);
        return forward;
    }

    public ActionForward deleteConfirmation(ActionMapping mapping, ActionForm form,
                                            HttpServletRequest request, HttpServletResponse response) throws Exception {

        return mapping.findForward(Constants.DELETE_CONFIRMATION);
    }
}
