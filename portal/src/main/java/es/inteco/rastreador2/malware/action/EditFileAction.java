package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.rastreador2.malware.actionform.EditFileForm;
import es.inteco.utils.FileUtils;
import org.apache.struts.Globals;
import org.apache.struts.action.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class EditFileAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {

        String action = request.getParameter(Constants.ACTION);

        if (action != null && action.equals(Constants.EDITF)) {
            return loadContentFile(mapping, request);
        } else {
            if (isCancelled(request)) {
                return redirect(mapping, request);
            } else {
                return editFile(mapping, form, request);
            }
        }
    }

    private ActionForward redirect(ActionMapping mapping, HttpServletRequest request) {

        ActionForward forward = null;

        if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_A)) {
            forward = new ActionForward(mapping.findForward(Constants.EDIT_A));
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_B)) {
            forward = new ActionForward(mapping.findForward(Constants.EDIT_B));
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_C)) {
            forward = new ActionForward(mapping.findForward(Constants.EDIT_C));
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_D)) {
            forward = new ActionForward(mapping.findForward(Constants.EDIT_D));
        }
        if (forward != null) {
            forward.setRedirect(true);
        }
        return forward;

    }

    private ActionForward loadContentFile(ActionMapping mapping, HttpServletRequest request) {

        EditFileForm editFileForm = new EditFileForm();
        editFileForm.setName(request.getParameter(Constants.FILE));
        List<String> content = FileUtils.listContents(path(request) + editFileForm.getName());
        if (content != null) {
            for (String line : content) {
                if (editFileForm.getText() != null) {
                    editFileForm.setText(editFileForm.getText() + line + "\n");
                } else {
                    editFileForm.setText(line + "\n");
                }
            }
            request.setAttribute(Constants.EDIT_FILE_FORM, editFileForm);
            return mapping.findForward(Constants.EDIT_FILE);
        } else {
            ActionErrors errors = new ActionErrors();
            errors.add(Globals.MESSAGE_KEY, new ActionMessage("mensaje.error.fichero.corrupto"));
            saveErrors(request.getSession(), errors);
            return redirect(mapping, request);
        }
    }

    private ActionForward editFile(ActionMapping mapping, ActionForm form, HttpServletRequest request) {

        EditFileForm editFileForm = (EditFileForm) form;
        ActionErrors errors = editFileForm.validate(mapping, request);

        if (errors == null || errors.isEmpty()) {
            FileUtils.writeContents(path(request) + editFileForm.getName(), convertStringToList(editFileForm.getText()));
            return redirect(mapping, request);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.EDIT_FILE);
        }
    }

    private String path(HttpServletRequest request) {
        PropertiesManager pmgr = new PropertiesManager();
        String path = "";
        if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_B)) {
            path = pmgr.getValue("malware.properties", "mime.type.file.path");
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_C)) {
            if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_WL)) {
                path = pmgr.getValue("malware.properties", "domains.wl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_WL);
            } else if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_BL)) {
                path = pmgr.getValue("malware.properties", "domains.bl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_BL);
            }
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_D)) {
            if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_WL)) {
                path = pmgr.getValue("malware.properties", "certificates.wl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_WL);
            } else if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_BL)) {
                path = pmgr.getValue("malware.properties", "certificates.bl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_BL);
            }
        }
        return path;
    }

    private static List<String> convertStringToList(String lista) {
        List<String> urlsList = new ArrayList<String>();
        StringTokenizer tokenizer = new StringTokenizer(lista, "\n");
        while (tokenizer.hasMoreTokens()) {
            urlsList.add(tokenizer.nextToken());
        }
        return urlsList;
    }

}
