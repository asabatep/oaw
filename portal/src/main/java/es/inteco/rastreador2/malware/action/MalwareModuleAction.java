package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.plugin.dao.DataBaseManager;
import es.inteco.rastreador2.dao.rastreo.RastreoDAO;
import es.inteco.rastreador2.malware.dao.MalwareDao;
import es.inteco.rastreador2.malware.dao.MalwareHit;
import es.inteco.rastreador2.malware.dao.MalwareTerm;
import es.inteco.rastreador2.malware.dao.MalwareTermResults;
import es.inteco.rastreador2.malware.utils.MalwareUtils;
import es.inteco.rastreador2.pdf.ExportAction;
import es.inteco.rastreador2.utils.CrawlerUtils;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Connection;
import java.util.List;

/**
 * Clase InformesDispatchAction.
 * Action de Informes
 *
 * @author psanchez
 */
public class MalwareModuleAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception {
        if (CrawlerUtils.hasAccess(request, "show.crawler.results")) {
            Connection c = null;
            try {
                c = DataBaseManager.getConnection();
                String user = (String) request.getSession().getAttribute(Constants.USER);
                long idRastreo = Long.parseLong(request.getParameter(Constants.ID_RASTREO));
                //Comprobamos que el usuario esta asociado con los resultados de los rastreos que quiere recuperar
                if (RastreoDAO.crawlerToUser(c, idRastreo, user) || RastreoDAO.crawlerToClientAccount(c, idRastreo, user)) {
                    if (request.getParameter(Constants.ACCION).equals(Constants.RESULTS_BY_MODULE)) {
                        return resultsByModule(mapping, form, request, response);
                    }
                    if (request.getParameter(Constants.ACCION).equals(Constants.RESULTS_BY_MODULE_DETAIL)) {
                        return resultsByModuleDetail(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.EXPORT_CSV)) {
                        return exportCSV(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.EXPORT_PDF)) {
                        return exportPDF(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.EXPORT_DETAIL_CSV)) {
                        return exportDetailCSV(mapping, form, request, response);
                    } else if (request.getParameter(Constants.ACCION).equals(Constants.EXPORT_DETAIL_PDF)) {
                        return exportDetailPDF(mapping, form, request, response);
                    }
                }
            } catch (Exception e) {
                Logger.putLog("Excepcion: ", MalwareModuleAction.class, Logger.LOG_LEVEL_ERROR, e);
                return mapping.findForward(Constants.ERROR);
            } finally {
                DataBaseManager.closeConnection(c);
            }
        } else {
            return mapping.findForward(Constants.NO_PERMISSION);
        }

        return null;
    }

    public ActionForward resultsByModule(ActionMapping mapping, ActionForm form,
                                         HttpServletRequest request, HttpServletResponse response) throws Exception {

        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        try {
            c = DataBaseManager.getConnection();

            String[] idHits = {pmgr.getValue("malware.properties", "modulo.a.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.b.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.c.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.d.hit.id")};

            List<MalwareHit> modules = MalwareUtils.getHitsByUrl(c, idHits);

            // Añadimos las ocurrencias de los términos en aquellos hits que tengan
            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            MalwareUtils.addTermOccurrences(c, modules, idExecution, null);

            // Añadimos las ocurrencias de cada módulo
            MalwareUtils.addModuleOccurrences(c, modules, idExecution);

            request.setAttribute(Constants.MODULES, modules);

            return mapping.findForward(Constants.RESULTS_BY_MODULE);
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUrlAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
        }
    }

    public ActionForward resultsByModuleDetail(ActionMapping mapping, ActionForm form,
                                               HttpServletRequest request, HttpServletResponse response) throws Exception {

        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        try {
            c = DataBaseManager.getConnection();

            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            long idTerm = Long.parseLong(request.getParameter(Constants.ID_TERMINO));
            request.setAttribute(Constants.TERM_RESULTS_URL, MalwareDao.getTermsByUrl(c, idTerm, idExecution));

            MalwareTerm malwareTerm = MalwareDao.getTermById(c, idTerm);
            request.setAttribute(Constants.TERM, malwareTerm.getTerm());

            return mapping.findForward(Constants.RESULTS_BY_MODULE_DETAIL);
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUrlAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
        }
    }

    public ActionForward exportCSV(ActionMapping mapping, ActionForm form,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        String path = null;

        try {
            c = DataBaseManager.getConnection();

            String[] idHits = {pmgr.getValue("malware.properties", "modulo.a.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.b.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.c.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.d.hit.id")};

            List<MalwareHit> modules = MalwareUtils.getHitsByUrl(c, idHits);

            // Añadimos las ocurrencias de los términos en aquellos hits que tengan
            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            MalwareUtils.addTermOccurrences(c, modules, idExecution, null);

            // Añadimos las ocurrencias de cada módulo
            MalwareUtils.addModuleOccurrences(c, modules, idExecution);

            path = pmgr.getValue("malware.properties", "csv.export.tmp") + System.currentTimeMillis() + ".csv";
            MalwareUtils.writeModuleCSVFile(path, modules, request);
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUrlAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
        }

        try {
            CrawlerUtils.returnFile(path, response, "text/comma-separated-values", true);
        } catch (Exception e) {
            Logger.putLog("Exception al devolver el PDF", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
        }

        return null;
    }

    public ActionForward exportPDF(ActionMapping mapping, ActionForm form,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;
        Connection systemConn = null;

        String path = null;

        try {
            c = DataBaseManager.getConnection();

            systemConn = DataBaseManager.getConnection();

            String[] idHits = {pmgr.getValue("malware.properties", "modulo.a.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.b.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.c.hit.id"),
                    pmgr.getValue("malware.properties", "modulo.d.hit.id")};

            List<MalwareHit> modules = MalwareUtils.getHitsByUrl(c, idHits);

            // Añadimos las ocurrencias de los términos en aquellos hits que tengan
            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            long idCrawling = Long.parseLong(request.getParameter(Constants.ID_RASTREO));
            MalwareUtils.addTermOccurrences(c, modules, idExecution, null);

            // Añadimos las ocurrencias de cada módulo
            MalwareUtils.addModuleOccurrences(c, modules, idExecution);

            path = pmgr.getValue("malware.properties", "csv.export.tmp") + System.currentTimeMillis() + ".csv";
            MalwareUtils.writeModulePDFFile(path, modules, request, RastreoDAO.recuperarNombreRastreo(systemConn, idCrawling));

        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUrlAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
            DataBaseManager.closeConnection(systemConn);
        }

        try {
            CrawlerUtils.returnFile(path, response, "application/pdf", true);
        } catch (Exception e) {
            Logger.putLog("Exception al devolver el PDF", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
        }

        return null;
    }

    public ActionForward exportDetailPDF(ActionMapping mapping, ActionForm form,
                                         HttpServletRequest request, HttpServletResponse response) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;
        Connection systemConn = null;

        String path = null;

        try {
            c = DataBaseManager.getConnection();

            systemConn = DataBaseManager.getConnection();

            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            long idCrawling = Long.parseLong(request.getParameter(Constants.ID_RASTREO));
            long idTerm = Long.parseLong(request.getParameter(Constants.ID_TERMINO));
            List<MalwareTermResults> terms = MalwareDao.getTermsByUrl(c, idTerm, idExecution);

            path = pmgr.getValue("malware.properties", "csv.export.tmp") + System.currentTimeMillis() + ".csv";
            MalwareTerm malwareTerm = MalwareDao.getTermById(c, idTerm);
            MalwareUtils.writeModuleDetailPDFFile(path, terms, request, RastreoDAO.recuperarNombreRastreo(systemConn, idCrawling), malwareTerm.getTerm());

        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUrlAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
            DataBaseManager.closeConnection(systemConn);
        }

        try {
            CrawlerUtils.returnFile(path, response, "application/pdf", true);
        } catch (Exception e) {
            Logger.putLog("Exception al devolver el PDF", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
        }

        return null;
    }

    public ActionForward exportDetailCSV(ActionMapping mapping, ActionForm form,
                                         HttpServletRequest request, HttpServletResponse response) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        Connection c = null;

        String path = null;

        try {
            c = DataBaseManager.getConnection();

            long idExecution = Long.parseLong(request.getParameter(Constants.ID));
            long idTerm = Long.parseLong(request.getParameter(Constants.ID_TERMINO));
            List<MalwareTermResults> terms = MalwareDao.getTermsByUrl(c, idTerm, idExecution);

            path = pmgr.getValue("malware.properties", "csv.export.tmp") + System.currentTimeMillis() + ".csv";
            MalwareUtils.writeModuleDetailCSVFile(path, terms, request);
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUrlAction.class, Logger.LOG_LEVEL_ERROR, e);
            return mapping.findForward(Constants.ERROR);
        } finally {
            DataBaseManager.closeConnection(c);
        }

        try {
            CrawlerUtils.returnFile(path, response, "text/comma-separated-values", true);
        } catch (Exception e) {
            Logger.putLog("Exception al devolver el PDF", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
        }

        return null;
    }
}
