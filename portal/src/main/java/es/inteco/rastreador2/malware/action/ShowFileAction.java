package es.inteco.rastreador2.malware.action;

import es.inteco.common.Constants;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.rastreador2.malware.actionform.ShowFileForm;
import es.inteco.utils.FileUtils;
import org.apache.struts.Globals;
import org.apache.struts.action.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;

public class ShowFileAction extends Action {

    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String action = request.getParameter(Constants.ACTION);

        if (action != null && action.equals(Constants.VOLVER)) {
            return redirect(mapping, request);
        } else {
            return showFile(mapping, request);
        }
    }

    private ActionForward redirect(ActionMapping mapping, HttpServletRequest request) {

        ActionForward forward = null;

        if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_A)) {
            forward = new ActionForward(mapping.findForward(Constants.CONFIG_A));
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_B)) {
            forward = new ActionForward(mapping.findForward(Constants.CONFIG_B));
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_C)) {
            forward = new ActionForward(mapping.findForward(Constants.CONFIG_C));
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_D)) {
            forward = new ActionForward(mapping.findForward(Constants.CONFIG_D));
        }
        if (forward != null) {
            forward.setRedirect(true);
        }
        return forward;

    }

    private ActionForward showFile(ActionMapping mapping, HttpServletRequest request) {
        String file = request.getParameter(Constants.FILE);
        List<String> content = FileUtils.listContents(path(request) + file);

        if (content != null) {
            List<ShowFileForm> showFileList = new ArrayList<>();
            for (String line : content) {
                ShowFileForm showFileForm = new ShowFileForm();
                if (line.indexOf(';') != -1) {
                    if (line.substring(0, line.indexOf(';')).trim().length() < 1) {
                        showFileForm.setType("-");
                    } else {
                        showFileForm.setType(line.substring(0, line.indexOf(';')));
                    }
                    if (line.length() <= line.substring(0, line.indexOf(';')).length() + 1) {
                        showFileForm.setExtension("-");
                    } else {
                        showFileForm.setExtension(line.substring(line.indexOf(';') + 1));
                    }
                } else {
                    if (line.trim().length() < 1) {
                        showFileForm.setType("-");
                    } else {
                        showFileForm.setType(line);
                    }
                    showFileForm.setExtension("-");
                }
                showFileList.add(showFileForm);
            }

            request.setAttribute(Constants.FILE_CONTENT_LIST, showFileList);
            return mapping.findForward(Constants.SHOW_FILE);
        } else {
            ActionErrors errors = new ActionErrors();
            errors.add(Globals.MESSAGE_KEY, new ActionMessage("mensaje.error.fichero.corrupto"));
            saveErrors(request.getSession(), errors);
            return redirect(mapping, request);
        }
    }

    private String path(HttpServletRequest request) {
        PropertiesManager pmgr = new PropertiesManager();
        String path = "";
        if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_B)) {
            path = pmgr.getValue("malware.properties", "mime.type.file.path");
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_C)) {
            if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_WL)) {
                path = pmgr.getValue("malware.properties", "domains.wl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_WL);
            } else if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_BL)) {
                path = pmgr.getValue("malware.properties", "domains.bl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_BL);
            }
        } else if (request.getSession().getAttribute(Constants.SUBMENU).equals(Constants.SUBMENU_CONFIG_MALWARE_D)) {
            if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_WL)) {
                path = pmgr.getValue("malware.properties", "certificates.wl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_WL);
            } else if (request.getParameter(Constants.TYPE_LIST_FILE) != null && request.getParameter(Constants.TYPE_LIST_FILE).equals(Constants.TYPE_LIST_FILE_BL)) {
                path = pmgr.getValue("malware.properties", "certificates.bl.file.path");
                request.setAttribute(Constants.TYPE_LIST_FILE, Constants.TYPE_LIST_FILE_BL);
            }
        }
        return path;
    }
}
