package es.inteco.rastreador2.malware.utils;

import com.lowagie.text.*;
import com.lowagie.text.Font;
import com.lowagie.text.pdf.*;
import es.inteco.common.Constants;
import es.inteco.common.logging.Logger;
import es.inteco.common.properties.PropertiesManager;
import es.inteco.common.utils.StringUtils;
import es.inteco.rastreador2.malware.dao.MalwareDao;
import es.inteco.rastreador2.malware.dao.MalwareHit;
import es.inteco.rastreador2.malware.dao.MalwareTerm;
import es.inteco.rastreador2.malware.dao.MalwareTermResults;
import es.inteco.rastreador2.pdf.ExportAction;
import es.inteco.rastreador2.pdf.template.ExportPageEvents;
import org.apache.struts.Globals;
import org.apache.struts.util.MessageResources;

import javax.servlet.http.HttpServletRequest;
import java.awt.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.sql.Connection;
import java.util.*;
import java.util.List;

public final class MalwareUtils {

    private MalwareUtils() {
    }

    public static List<MalwareHit> getHitsByUrl(Connection c, String[] idHits) throws Exception {
        List<MalwareHit> modules = new ArrayList<MalwareHit>();
        for (String idHit : idHits) {
            MalwareHit module = MalwareDao.getHitById(c, Integer.parseInt(idHit));
            module.setSubhits(MalwareDao.getHitsByModule(c, module.getId()));
            modules.add(module);
        }
        return modules;
    }

    public static List<String> getHitWithTerms() {
        PropertiesManager pmgr = new PropertiesManager();

        List<String> hitWithTerms = new ArrayList<String>();

        hitWithTerms.add(pmgr.getValue("malware.properties", "terminos.a.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "ofuscado.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "terminos.b.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "dom.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "javascript.hit.id"));
        hitWithTerms.add(pmgr.getValue("malware.properties", "actionscript.hit.id"));

        return hitWithTerms;
    }

    public static List<String> getHitWithOnlyTerm() {

        PropertiesManager pmgr = new PropertiesManager();

        List<String> hitWithOnlyTerm = new ArrayList<String>();

        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "reintentos.hit.id"));
        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "redirecciones.hit.id"));
        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "multimedia.hit.id"));
        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "dominio.wl.hit.id"));
        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "dominio.bl.hit.id"));
        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "certificados.wl.hit.id"));
        hitWithOnlyTerm.add(pmgr.getValue("malware.properties", "certificados.bl.hit.id"));

        return hitWithOnlyTerm;
    }

    public static void addTermOccurrences(Connection conn, List<MalwareHit> modules, long idExecution, String url) {

        List<String> hitWithTerms = getHitWithTerms();
        List<String> hitWithOnlyTerm = getHitWithOnlyTerm();

        for (MalwareHit module : modules) {
            for (MalwareHit submodule : module.getSubhits()) {
                try {
                    if (hitWithTerms.contains(String.valueOf(submodule.getId())) && url != null) {
                        submodule.setTerms(MalwareDao.getTermsOccurrencesByModule(conn, submodule.getId(), url, idExecution));
                    } else if (hitWithTerms.contains(String.valueOf(submodule.getId())) && url == null) {
                        submodule.setTerms(compressTermList(MalwareDao.getTermsOccurrencesByModule(conn, submodule.getId(), url, idExecution)));
                    } else if (hitWithOnlyTerm.contains(String.valueOf(submodule.getId())) && url == null) {
                        submodule.setOnlyTerm(MalwareDao.getOnlyTerms(conn, submodule.getId()));
                    }
                } catch (Exception e) {
                    Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
                }
            }
        }
    }

    public static void addModuleOccurrences(Connection conn, List<MalwareHit> modules, long idExecution) {
        for (MalwareHit module : modules) {
            for (MalwareHit submodule : module.getSubhits()) {
                try {
                    submodule.setOccurrences(MalwareDao.getModuleOccurrences(conn, submodule.getId(), idExecution));
                } catch (Exception e) {
                    Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
                }
            }
        }
    }

    public static List<MalwareTerm> compressTermList(List<MalwareTerm> terms) {
        Map<String, MalwareTerm> termsHash = new HashMap<String, MalwareTerm>();
        for (MalwareTerm term : terms) {
            if (termsHash.containsKey(term.getTerm())) {
                MalwareTerm termHash = termsHash.get(term.getTerm());
                termHash.setOccurrences(termHash.getOccurrences() + term.getOccurrences());
                termsHash.remove(term.getTerm());
                termsHash.put(term.getTerm(), termHash);
            } else {
                termsHash.put(term.getTerm(), term);
            }
        }

        List<MalwareTerm> compressedTerms = new ArrayList<MalwareTerm>();
        for (Iterator<String> iterator = termsHash.keySet().iterator(); iterator.hasNext(); ) {
            compressedTerms.add(termsHash.get(iterator.next()));
        }

        return compressedTerms;
    }

    public static void writeUrlCSVFile(String filename, List<MalwareHit> modules, HttpServletRequest request) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        String delim = pmgr.getValue("malware.properties", "csv.field.delimiter");

        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }

        FileWriter writer = null;
        try {
            writer = new FileWriter(file);

            writer.append(getResources(request).getMessage(request.getLocale(), "search.results.hit") + delim
                    + getResources(request).getMessage(request.getLocale(), "search.results.suspicion.level") + delim
                    + getResources(request).getMessage(request.getLocale(), "search.results.occurrences") + "\n");

            for (MalwareHit module : modules) {
                writer.append(module.getName() + "\n");
                for (MalwareHit submodule : module.getSubhits()) {
                    writer.append(submodule.getName() + delim + "?????" + delim + "\n");
                    if (submodule.getTerms() != null) {
                        for (MalwareTerm term : submodule.getTerms()) {
                            writer.append(term.getTerm() + delim + delim + term.getOccurrences() + "\n");
                        }
                    }
                }
                writer.append("\n");
            }
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (Exception e) {
                Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
            }
        }
    }

    public static void writeUrlPDFFile(String filename, List<MalwareHit> modules, HttpServletRequest request, String crawlingName, String url) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();

        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }

        BaseFont arial = BaseFont.createFont(pmgr.getValue("pdf.properties", "path.pdf.font"), BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        Document document = null;

        try {
            document = initDocument(request, file, arial, crawlingName, getResources(request).getMessage(request.getLocale(), "malware.pdf.url.subtitle"));

            Paragraph cTitle = new Paragraph("", new Font(arial, 18, Font.UNDERLINE, Constants.ROJO_INTECO));
            Chapter chapter = new Chapter(cTitle, 1);
            chapter.setNumberDepth(0);

            Paragraph info = new Paragraph(StringUtils.removeHtmlTags(getResources(request).getMessage(request.getLocale(), "malware.url.detail.info", url)));
            chapter.add(info);

            for (MalwareHit module : modules) {
                PdfPTable table = new PdfPTable(3);
                table.setSpacingBefore(25);

                addCell(table, module.getName(), arial, Element.ALIGN_CENTER, Color.BLACK, Color.WHITE, Font.NORMAL, 3);
                addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.hit"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);
                addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.suspicion.level"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);
                addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.occurrences"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);

                for (MalwareHit submodule : module.getSubhits()) {
                    addCell(table, submodule.getName(), arial, Element.ALIGN_LEFT, Color.BLACK, Color.WHITE, Font.BOLD, 1);
                    addCell(table, "?????", arial, Element.ALIGN_RIGHT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);
                    addCell(table, "", arial, Element.ALIGN_LEFT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);

                    if (submodule.getTerms() != null) {
                        for (MalwareTerm term : submodule.getTerms()) {
                            addCell(table, term.getTerm(), arial, Element.ALIGN_CENTER, Color.BLACK, Color.WHITE, Font.ITALIC, 1);
                            addCell(table, "", arial, Element.ALIGN_LEFT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);
                            addCell(table, term.getOccurrences().toString(), arial, Element.ALIGN_RIGHT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);
                        }
                    }
                }

                chapter.add(table);
            }

            document.add(chapter);
        } catch (DocumentException e) {
            Logger.putLog("Error al exportar a pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
            throw e;
        } catch (Exception e) {
            Logger.putLog("Excepción genérica al generar el pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
            throw e;
        } finally {
            if (document != null && document.isOpen()) {
                try {
                    document.close();
                } catch (Exception e) {
                    Logger.putLog("Error al cerrar el pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
                }
            }
        }
    }

    private static MessageResources getResources(HttpServletRequest request) {
        return (MessageResources) request.getAttribute(Globals.MESSAGES_KEY);
    }

    public static void writeModuleCSVFile(String filename, List<MalwareHit> modules, HttpServletRequest request) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        String delim = pmgr.getValue("malware.properties", "csv.field.delimiter");

        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }

        FileWriter writer = null;
        try {
            writer = new FileWriter(file);

            writer.append(getResources(request).getMessage(request.getLocale(), "search.results.hit") + delim
                    + getResources(request).getMessage(request.getLocale(), "search.results.occurrences") + "\n");

            for (MalwareHit module : modules) {
                writer.append(module.getName() + "\n");
                for (MalwareHit submodule : module.getSubhits()) {
                    writer.append(submodule.getName() + delim + submodule.getOccurrences() + "\n");
                    if (submodule.getTerms() != null) {
                        for (MalwareTerm term : submodule.getTerms()) {
                            writer.append(term.getTerm() + delim + term.getOccurrences() + "\n");
                        }
                    }
                }
                writer.append("\n");
            }
            writer.close();
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            try {
                writer.close();
            } catch (Exception e) {
                Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
            }
        }
    }

    private static Document initDocument(HttpServletRequest request, File file, BaseFont font, String crawlingName, String subtitle) throws Exception {
        FileOutputStream fileOut = new FileOutputStream(file);
        Document document = new Document(PageSize.A4, 50, 50, 120, 72);

        try {
            PdfWriter writer = PdfWriter.getInstance(document, fileOut);
            writer.getExtraCatalog().put(new PdfName("Lang"), new PdfString("es"));
            writer.setPageEvent(new ExportPageEvents(getResources(request).getMessage("pdf.accessibility.foot.text"), ""));

            document.open();

            Paragraph titleParagraph = new Paragraph(getResources(request).getMessage(request.getLocale(), "malware.pdf.title", crawlingName), new Font(font, 34, Font.BOLD, Constants.ROJO_INTECO));
            titleParagraph.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(titleParagraph);

            Paragraph subtitleParagraph = new Paragraph(subtitle, new Font(font, 30, Font.BOLD, new Color(128, 0, 0)));
            subtitleParagraph.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(subtitleParagraph);
        } catch (Exception e) {
            throw e;
        }

        return document;
    }

    public static void writeModulePDFFile(String filename, List<MalwareHit> modules, HttpServletRequest request, String crawlingName) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();

        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }

        BaseFont arial = BaseFont.createFont(pmgr.getValue("pdf.properties", "path.pdf.font"), BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        Document document = null;

        try {
            document = initDocument(request, file, arial, crawlingName, getResources(request).getMessage(request.getLocale(), "malware.pdf.module.subtitle"));

            Paragraph cTitle = new Paragraph("", new Font(arial, 18, Font.UNDERLINE, Constants.ROJO_INTECO));
            Chapter chapter = new Chapter(cTitle, 1);
            chapter.setNumberDepth(0);

            for (MalwareHit module : modules) {
                float[] widths = {0.85f, 0.15f};
                PdfPTable table = new PdfPTable(widths);
                table.setSpacingAfter(25);

                addCell(table, module.getName(), arial, Element.ALIGN_CENTER, Color.BLACK, Color.WHITE, Font.NORMAL, 2);
                addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.hit"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);
                addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.occurrences"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);

                for (MalwareHit submodule : module.getSubhits()) {
                    addCell(table, submodule.getName(), arial, Element.ALIGN_LEFT, Color.BLACK, Color.WHITE, Font.BOLD, 1);
                    addCell(table, submodule.getOccurrences().toString(), arial, Element.ALIGN_RIGHT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);

                    if (submodule.getTerms() != null) {
                        for (MalwareTerm term : submodule.getTerms()) {
                            addCell(table, term.getTerm(), arial, Element.ALIGN_CENTER, Color.BLACK, Color.WHITE, Font.ITALIC, 1);
                            addCell(table, term.getOccurrences().toString(), arial, Element.ALIGN_RIGHT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);
                        }
                    }
                }

                chapter.add(table);
            }

            document.add(chapter);
        } catch (DocumentException e) {
            Logger.putLog("Error al exportar a pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
            throw e;
        } catch (Exception e) {
            Logger.putLog("Excepción genérica al generar el pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
            throw e;
        } finally {
            if (document != null && document.isOpen()) {
                try {
                    document.close();
                } catch (Exception e) {
                    Logger.putLog("Error al cerrar el pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
                }
            }
        }
    }

    public static void writeModuleDetailCSVFile(String filename, List<MalwareTermResults> results, HttpServletRequest request) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();
        String delim = pmgr.getValue("malware.properties", "csv.field.delimiter");

        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }

        FileWriter writer = null;
        try {
            writer = new FileWriter(file);

            writer.append(getResources(request).getMessage(request.getLocale(), "search.results.domain") + delim
                    + getResources(request).getMessage(request.getLocale(), "search.results.occurrences") + "\n");

            for (MalwareTermResults result : results) {
                writer.append(result.getUrl() + delim + result.getOccurrences() + "\n");
            }
        } catch (Exception e) {
            Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
        } finally {
            try {
                writer.close();
            } catch (Exception e) {
                Logger.putLog("Excepcion: ", MalwareUtils.class, Logger.LOG_LEVEL_ERROR, e);
            }
        }
    }

    public static void writeModuleDetailPDFFile(String filename, List<MalwareTermResults> results, HttpServletRequest request, String crawlingName, String term) throws Exception {
        PropertiesManager pmgr = new PropertiesManager();

        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }

        BaseFont arial = BaseFont.createFont(pmgr.getValue("pdf.properties", "path.pdf.font"), BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        Document document = null;

        try {
            document = initDocument(request, file, arial, crawlingName, getResources(request).getMessage(request.getLocale(), "malware.pdf.module.detail.subtitle"));

            Paragraph cTitle = new Paragraph("", new Font(arial, 18, Font.UNDERLINE, Constants.ROJO_INTECO));
            Chapter chapter = new Chapter(cTitle, 1);
            chapter.setNumberDepth(0);

            Paragraph info = new Paragraph(StringUtils.removeHtmlTags(getResources(request).getMessage(request.getLocale(), "malware.module.detail.info", term)));
            chapter.add(info);

            float[] widths = {0.85f, 0.15f};
            PdfPTable table = new PdfPTable(widths);
            table.setSpacingBefore(25);

            addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.domain"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);
            addCell(table, getResources(request).getMessage(request.getLocale(), "search.results.occurrences"), arial, Element.ALIGN_LEFT, Color.WHITE, Constants.ROJO_INTECO, Font.NORMAL, 1);

            for (MalwareTermResults result : results) {
                addCell(table, result.getUrl(), arial, Element.ALIGN_LEFT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);
                addCell(table, result.getOccurrences().toString(), arial, Element.ALIGN_RIGHT, Color.BLACK, Color.WHITE, Font.NORMAL, 1);
            }

            chapter.add(table);

            document.add(chapter);
        } catch (DocumentException e) {
            Logger.putLog("Error al exportar a pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
            throw e;
        } catch (Exception e) {
            Logger.putLog("Excepción genérica al generar el pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
            throw e;
        } finally {
            if (document != null && document.isOpen()) {
                try {
                    document.close();
                } catch (Exception e) {
                    Logger.putLog("Error al cerrar el pdf", ExportAction.class, Logger.LOG_LEVEL_ERROR, e);
                }
            }
        }
    }

    private static void addCell(PdfPTable table, String text, BaseFont font, int alignment, Color fontColor, Color backgroundColor, int fontType, int colspan) {
        PdfPCell labelCell = new PdfPCell(new Paragraph(text, new Font(font, 10, fontType, fontColor)));
        labelCell.setColspan(colspan);
        labelCell.setBackgroundColor(backgroundColor);
        labelCell.setHorizontalAlignment(alignment);
        table.addCell(labelCell);
    }
}
